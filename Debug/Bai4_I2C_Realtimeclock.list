
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fc0  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb0  08008cb0  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb8  08008cb8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000001fc  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e0f  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000317d  00000000  00000000  00035e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00038fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b0  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230d4  00000000  00000000  0003b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e3f  00000000  00000000  0005e38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf8d6  00000000  00000000  000751cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144aa1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a90  00000000  00000000  00144af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cd8 	.word	0x08005cd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08005cd8 	.word	0x08005cd8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fb2b 	bl	8002b34 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 fb1e 	bl	8002b34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fb19 	bl	8002b34 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f004 fa40 	bl	800498e <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000044 	.word	0x20000044
 80005b8:	20000180 	.word	0x20000180
 80005bc:	20000070 	.word	0x20000070

080005c0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005c4:	201e      	movs	r0, #30
 80005c6:	f001 ff23 	bl	8002410 <DEC2BCD>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <ds3231_init+0x80>)
 80005d0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005d2:	2016      	movs	r0, #22
 80005d4:	f001 ff1c 	bl	8002410 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <ds3231_init+0x80>)
 80005de:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005e0:	2015      	movs	r0, #21
 80005e2:	f001 ff15 	bl	8002410 <DEC2BCD>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <ds3231_init+0x80>)
 80005ec:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005ee:	2006      	movs	r0, #6
 80005f0:	f001 ff0e 	bl	8002410 <DEC2BCD>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <ds3231_init+0x80>)
 80005fa:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005fc:	200f      	movs	r0, #15
 80005fe:	f001 ff07 	bl	8002410 <DEC2BCD>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <ds3231_init+0x80>)
 8000608:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800060a:	2009      	movs	r0, #9
 800060c:	f001 ff00 	bl	8002410 <DEC2BCD>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <ds3231_init+0x80>)
 8000616:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000618:	2017      	movs	r0, #23
 800061a:	f001 fef9 	bl	8002410 <DEC2BCD>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <ds3231_init+0x80>)
 8000624:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000626:	2332      	movs	r3, #50	; 0x32
 8000628:	2203      	movs	r2, #3
 800062a:	21d0      	movs	r1, #208	; 0xd0
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <ds3231_init+0x84>)
 800062e:	f002 feff 	bl	8003430 <HAL_I2C_IsDeviceReady>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d000      	beq.n	800063a <ds3231_init+0x7a>
		while(1);
 8000638:	e7fe      	b.n	8000638 <ds3231_init+0x78>
	};
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000098 	.word	0x20000098
 8000644:	200000f0 	.word	0x200000f0

08000648 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fed8 	bl	8002410 <DEC2BCD>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	b29a      	uxth	r2, r3
 8000668:	230a      	movs	r3, #10
 800066a:	9302      	str	r3, [sp, #8]
 800066c:	2301      	movs	r3, #1
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	21d0      	movs	r1, #208	; 0xd0
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ds3231_Write+0x40>)
 800067c:	f002 fbb8 	bl	8002df0 <HAL_I2C_Mem_Write>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000f0 	.word	0x200000f0

0800068c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000692:	230a      	movs	r3, #10
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2307      	movs	r3, #7
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <ds3231_ReadTime+0xa4>)
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	2200      	movs	r2, #0
 80006a2:	21d0      	movs	r1, #208	; 0xd0
 80006a4:	4823      	ldr	r0, [pc, #140]	; (8000734 <ds3231_ReadTime+0xa8>)
 80006a6:	f002 fc9d 	bl	8002fe4 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fe94 	bl	80023dc <BCD2DEC>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <ds3231_ReadTime+0xac>)
 80006ba:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fe8b 	bl	80023dc <BCD2DEC>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <ds3231_ReadTime+0xb0>)
 80006cc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fe82 	bl	80023dc <BCD2DEC>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <ds3231_ReadTime+0xb4>)
 80006de:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fe79 	bl	80023dc <BCD2DEC>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <ds3231_ReadTime+0xb8>)
 80006f0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fe70 	bl	80023dc <BCD2DEC>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <ds3231_ReadTime+0xbc>)
 8000702:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fe67 	bl	80023dc <BCD2DEC>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <ds3231_ReadTime+0xc0>)
 8000714:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fe5e 	bl	80023dc <BCD2DEC>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ds3231_ReadTime+0xc4>)
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000098 	.word	0x20000098
 8000734:	200000f0 	.word	0x200000f0
 8000738:	20000090 	.word	0x20000090
 800073c:	20000092 	.word	0x20000092
 8000740:	20000095 	.word	0x20000095
 8000744:	20000094 	.word	0x20000094
 8000748:	20000093 	.word	0x20000093
 800074c:	20000096 	.word	0x20000096
 8000750:	20000091 	.word	0x20000091

08000754 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_FSMC_Init+0xec>)
 8000782:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000786:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_FSMC_Init+0xec>)
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <MX_FSMC_Init+0xf0>)
 800078c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_FSMC_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_FSMC_Init+0xec>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_FSMC_Init+0xec>)
 80007a2:	2210      	movs	r2, #16
 80007a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_FSMC_Init+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_FSMC_Init+0xec>)
 80007c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_FSMC_Init+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_FSMC_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_FSMC_Init+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_FSMC_Init+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007e6:	230f      	movs	r3, #15
 80007e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007ea:	230f      	movs	r3, #15
 80007ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007ee:	233c      	movs	r3, #60	; 0x3c
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007f6:	2310      	movs	r3, #16
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007fa:	2311      	movs	r3, #17
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000802:	2308      	movs	r3, #8
 8000804:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000806:	230f      	movs	r3, #15
 8000808:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800080a:	2309      	movs	r3, #9
 800080c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000812:	2310      	movs	r3, #16
 8000814:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000816:	2311      	movs	r3, #17
 8000818:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800081e:	463a      	mov	r2, r7
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_FSMC_Init+0xec>)
 8000828:	f004 fc94 	bl	8005154 <HAL_SRAM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000832:	f001 fb77 	bl	8001f24 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000836:	bf00      	nop
 8000838:	3738      	adds	r7, #56	; 0x38
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000a0 	.word	0x200000a0
 8000844:	a0000104 	.word	0xa0000104

08000848 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_FSMC_MspInit+0x88>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d131      	bne.n	80008c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_FSMC_MspInit+0x88>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_FSMC_MspInit+0x8c>)
 8000870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_FSMC_MspInit+0x8c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6393      	str	r3, [r2, #56]	; 0x38
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_FSMC_MspInit+0x8c>)
 800087c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000886:	f64f 7388 	movw	r3, #65416	; 0xff88
 800088a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000898:	230c      	movs	r3, #12
 800089a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <HAL_FSMC_MspInit+0x90>)
 80008a2:	f001 ffab 	bl	80027fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008a6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80008aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_FSMC_MspInit+0x94>)
 80008c2:	f001 ff9b 	bl	80027fc <HAL_GPIO_Init>
 80008c6:	e000      	b.n	80008ca <HAL_FSMC_MspInit+0x82>
    return;
 80008c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000048 	.word	0x20000048
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020c00 	.word	0x40020c00

080008e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008e8:	f7ff ffae 	bl	8000848 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	4b6f      	ldr	r3, [pc, #444]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a6e      	ldr	r2, [pc, #440]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b6c      	ldr	r3, [pc, #432]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	4b68      	ldr	r3, [pc, #416]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a67      	ldr	r2, [pc, #412]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b65      	ldr	r3, [pc, #404]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a60      	ldr	r2, [pc, #384]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a59      	ldr	r2, [pc, #356]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b57      	ldr	r3, [pc, #348]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a52      	ldr	r2, [pc, #328]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b50      	ldr	r3, [pc, #320]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b4c      	ldr	r3, [pc, #304]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a4b      	ldr	r2, [pc, #300]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b49      	ldr	r3, [pc, #292]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b45      	ldr	r3, [pc, #276]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a44      	ldr	r2, [pc, #272]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2170      	movs	r1, #112	; 0x70
 80009d2:	483f      	ldr	r0, [pc, #252]	; (8000ad0 <MX_GPIO_Init+0x1dc>)
 80009d4:	f002 f8ae 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009de:	483d      	ldr	r0, [pc, #244]	; (8000ad4 <MX_GPIO_Init+0x1e0>)
 80009e0:	f002 f8a8 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2140      	movs	r1, #64	; 0x40
 80009e8:	483b      	ldr	r0, [pc, #236]	; (8000ad8 <MX_GPIO_Init+0x1e4>)
 80009ea:	f002 f8a3 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4839      	ldr	r0, [pc, #228]	; (8000adc <MX_GPIO_Init+0x1e8>)
 80009f6:	f002 f89d 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4838      	ldr	r0, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0x1ec>)
 8000a00:	f002 f898 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a04:	2370      	movs	r3, #112	; 0x70
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482d      	ldr	r0, [pc, #180]	; (8000ad0 <MX_GPIO_Init+0x1dc>)
 8000a1c:	f001 feee 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0x1e0>)
 8000a3a:	f001 fedf 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a3e:	23c0      	movs	r3, #192	; 0xc0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x1e8>)
 8000a52:	f001 fed3 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a56:	2330      	movs	r3, #48	; 0x30
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_GPIO_Init+0x1e0>)
 8000a6a:	f001 fec7 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <MX_GPIO_Init+0x1e4>)
 8000a86:	f001 feb9 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_GPIO_Init+0x1e8>)
 8000aa4:	f001 feaa 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_GPIO_Init+0x1ec>)
 8000ac0:	f001 fe9c 	bl	80027fc <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f002 f821 	bl	8002b68 <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f001 f9fa 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000f0 	.word	0x200000f0
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7e:	23c0      	movs	r3, #192	; 0xc0
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b82:	2312      	movs	r3, #18
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9a:	f001 fe2f 	bl	80027fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <LCD_WR_REG+0x1c>)
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	8013      	strh	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	600ffffe 	.word	0x600ffffe

08000bf0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <LCD_WR_DATA+0x1c>)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	8053      	strh	r3, [r2, #2]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	600ffffe 	.word	0x600ffffe

08000c10 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <LCD_RD_DATA+0x20>)
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	b29b      	uxth	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	600ffffe 	.word	0x600ffffe

08000c34 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c52:	202a      	movs	r0, #42	; 0x2a
 8000c54:	f7ff ffbc 	bl	8000bd0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffc6 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffc0 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	0a1b      	lsrs	r3, r3, #8
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffba 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ffb4 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c88:	202b      	movs	r0, #43	; 0x2b
 8000c8a:	f7ff ffa1 	bl	8000bd0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffab 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffa5 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ca6:	883b      	ldrh	r3, [r7, #0]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff9f 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000cb2:	883b      	ldrh	r3, [r7, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff99 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cbe:	202c      	movs	r0, #44	; 0x2c
 8000cc0:	f7ff ff86 	bl	8000bd0 <LCD_WR_REG>
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}

08000ccc <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <lcd_Clear+0x70>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <lcd_Clear+0x70>)
 8000cf0:	885b      	ldrh	r3, [r3, #2]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ff9b 	bl	8000c34 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	e011      	b.n	8000d28 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	81bb      	strh	r3, [r7, #12]
 8000d08:	e006      	b.n	8000d18 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff6f 	bl	8000bf0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d12:	89bb      	ldrh	r3, [r7, #12]
 8000d14:	3301      	adds	r3, #1
 8000d16:	81bb      	strh	r3, [r7, #12]
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <lcd_Clear+0x70>)
 8000d1a:	885b      	ldrh	r3, [r3, #2]
 8000d1c:	89ba      	ldrh	r2, [r7, #12]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3f3      	bcc.n	8000d0a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	3301      	adds	r3, #1
 8000d26:	81fb      	strh	r3, [r7, #14]
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <lcd_Clear+0x70>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	89fa      	ldrh	r2, [r7, #14]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3e8      	bcc.n	8000d04 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000144 	.word	0x20000144

08000d40 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	80fb      	strh	r3, [r7, #6]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	80bb      	strh	r3, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	88fa      	ldrh	r2, [r7, #6]
 8000d56:	88b9      	ldrh	r1, [r7, #4]
 8000d58:	88f8      	ldrh	r0, [r7, #6]
 8000d5a:	f7ff ff6b 	bl	8000c34 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff45 	bl	8000bf0 <LCD_WR_DATA>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4603      	mov	r3, r0
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	70fb      	strb	r3, [r7, #3]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d9a:	085b      	lsrs	r3, r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	fb12 f303 	smulbb	r3, r2, r3
 8000dc6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	3b20      	subs	r3, #32
 8000dcc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29c      	uxth	r4, r3
 8000ddc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3b01      	subs	r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	88b9      	ldrh	r1, [r7, #4]
 8000dee:	88f8      	ldrh	r0, [r7, #6]
 8000df0:	4622      	mov	r2, r4
 8000df2:	f7ff ff1f 	bl	8000c34 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	827b      	strh	r3, [r7, #18]
 8000dfa:	e07a      	b.n	8000ef2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000dfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e00:	2b0c      	cmp	r3, #12
 8000e02:	d028      	beq.n	8000e56 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e08:	2b10      	cmp	r3, #16
 8000e0a:	d108      	bne.n	8000e1e <lcd_ShowChar+0xae>
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	8a7b      	ldrh	r3, [r7, #18]
 8000e10:	493c      	ldr	r1, [pc, #240]	; (8000f04 <lcd_ShowChar+0x194>)
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	440a      	add	r2, r1
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	e01b      	b.n	8000e56 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e22:	2b18      	cmp	r3, #24
 8000e24:	d10b      	bne.n	8000e3e <lcd_ShowChar+0xce>
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	8a79      	ldrh	r1, [r7, #18]
 8000e2a:	4837      	ldr	r0, [pc, #220]	; (8000f08 <lcd_ShowChar+0x198>)
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4403      	add	r3, r0
 8000e36:	440b      	add	r3, r1
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	75fb      	strb	r3, [r7, #23]
 8000e3c:	e00b      	b.n	8000e56 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000e3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e42:	2b20      	cmp	r3, #32
 8000e44:	d15a      	bne.n	8000efc <lcd_ShowChar+0x18c>
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	8a7b      	ldrh	r3, [r7, #18]
 8000e4a:	4930      	ldr	r1, [pc, #192]	; (8000f0c <lcd_ShowChar+0x19c>)
 8000e4c:	0192      	lsls	r2, r2, #6
 8000e4e:	440a      	add	r2, r1
 8000e50:	4413      	add	r3, r2
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	75bb      	strb	r3, [r7, #22]
 8000e5a:	e044      	b.n	8000ee6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d120      	bne.n	8000ea6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e64:	7dfa      	ldrb	r2, [r7, #23]
 8000e66:	7dbb      	ldrb	r3, [r7, #22]
 8000e68:	fa42 f303 	asr.w	r3, r2, r3
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <lcd_ShowChar+0x10e>
 8000e74:	883b      	ldrh	r3, [r7, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff feba 	bl	8000bf0 <LCD_WR_DATA>
 8000e7c:	e003      	b.n	8000e86 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff feb5 	bl	8000bf0 <LCD_WR_DATA>
				m++;
 8000e86:	7d7b      	ldrb	r3, [r7, #21]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e8c:	7d7b      	ldrb	r3, [r7, #21]
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e94:	fb02 f201 	mul.w	r2, r2, r1
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d11f      	bne.n	8000ee0 <lcd_ShowChar+0x170>
				{
					m=0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	757b      	strb	r3, [r7, #21]
					break;
 8000ea4:	e022      	b.n	8000eec <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000ea6:	7dfa      	ldrb	r2, [r7, #23]
 8000ea8:	7dbb      	ldrb	r3, [r7, #22]
 8000eaa:	fa42 f303 	asr.w	r3, r2, r3
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <lcd_ShowChar+0x152>
 8000eb6:	883a      	ldrh	r2, [r7, #0]
 8000eb8:	88b9      	ldrh	r1, [r7, #4]
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff3f 	bl	8000d40 <lcd_DrawPoint>
				x++;
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	8a3b      	ldrh	r3, [r7, #16]
 8000ecc:	1ad2      	subs	r2, r2, r3
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d105      	bne.n	8000ee0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ed4:	8a3b      	ldrh	r3, [r7, #16]
 8000ed6:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	80bb      	strh	r3, [r7, #4]
					break;
 8000ede:	e005      	b.n	8000eec <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ee0:	7dbb      	ldrb	r3, [r7, #22]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	75bb      	strb	r3, [r7, #22]
 8000ee6:	7dbb      	ldrb	r3, [r7, #22]
 8000ee8:	2b07      	cmp	r3, #7
 8000eea:	d9b7      	bls.n	8000e5c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000eec:	8a7b      	ldrh	r3, [r7, #18]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	827b      	strh	r3, [r7, #18]
 8000ef2:	8a7a      	ldrh	r2, [r7, #18]
 8000ef4:	89bb      	ldrh	r3, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d380      	bcc.n	8000dfc <lcd_ShowChar+0x8c>
 8000efa:	e000      	b.n	8000efe <lcd_ShowChar+0x18e>
		else return;
 8000efc:	bf00      	nop
				}
			}
		}
	}
}
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	08005d18 	.word	0x08005d18
 8000f08:	08006308 	.word	0x08006308
 8000f0c:	080074d8 	.word	0x080074d8

08000f10 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f24:	e004      	b.n	8000f30 <mypow+0x20>
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	71ba      	strb	r2, [r7, #6]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f5      	bne.n	8000f26 <mypow+0x16>
	return result;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e059      	b.n	800102c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000f78:	887c      	ldrh	r4, [r7, #2]
 8000f7a:	787a      	ldrb	r2, [r7, #1]
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f7ff ffc1 	bl	8000f10 <mypow>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	fbb4 f1f3 	udiv	r1, r4, r3
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <lcd_ShowIntNum+0xf8>)
 8000f96:	fba3 2301 	umull	r2, r3, r3, r1
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	1aca      	subs	r2, r1, r3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d121      	bne.n	8000ff4 <lcd_ShowIntNum+0xac>
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	787b      	ldrb	r3, [r7, #1]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	da1c      	bge.n	8000ff4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d117      	bne.n	8000ff0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	fb12 f303 	smulbb	r3, r2, r3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b298      	uxth	r0, r3
 8000fd4:	8c3a      	ldrh	r2, [r7, #32]
 8000fd6:	88b9      	ldrh	r1, [r7, #4]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	2220      	movs	r2, #32
 8000fea:	f7ff fec1 	bl	8000d70 <lcd_ShowChar>
				continue;
 8000fee:	e01a      	b.n	8001026 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	fb12 f303 	smulbb	r3, r2, r3
 8001000:	b29a      	uxth	r2, r3
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4413      	add	r3, r2
 8001006:	b298      	uxth	r0, r3
 8001008:	7b3b      	ldrb	r3, [r7, #12]
 800100a:	3330      	adds	r3, #48	; 0x30
 800100c:	b2da      	uxtb	r2, r3
 800100e:	8c3c      	ldrh	r4, [r7, #32]
 8001010:	88b9      	ldrh	r1, [r7, #4]
 8001012:	2300      	movs	r3, #0
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4623      	mov	r3, r4
 8001022:	f7ff fea5 	bl	8000d70 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	787b      	ldrb	r3, [r7, #1]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3a1      	bcc.n	8000f78 <lcd_ShowIntNum+0x30>
	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	bf00      	nop
 8001040:	cccccccd 	.word	0xcccccccd

08001044 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <lcd_SetDir+0x44>)
 8001060:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001064:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <lcd_SetDir+0x44>)
 8001068:	22f0      	movs	r2, #240	; 0xf0
 800106a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800106c:	e006      	b.n	800107c <lcd_SetDir+0x38>
		lcddev.width=240;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <lcd_SetDir+0x44>)
 8001070:	22f0      	movs	r2, #240	; 0xf0
 8001072:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <lcd_SetDir+0x44>)
 8001076:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800107a:	805a      	strh	r2, [r3, #2]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20000144 	.word	0x20000144

0800108c <lcd_init>:


void lcd_init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	48aa      	ldr	r0, [pc, #680]	; (8001340 <lcd_init+0x2b4>)
 8001098:	f001 fd4c 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800109c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a0:	f001 fa76 	bl	8002590 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010aa:	48a5      	ldr	r0, [pc, #660]	; (8001340 <lcd_init+0x2b4>)
 80010ac:	f001 fd42 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b4:	f001 fa6c 	bl	8002590 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ffc3 	bl	8001044 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010be:	20d3      	movs	r0, #211	; 0xd3
 80010c0:	f7ff fd86 	bl	8000bd0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010c4:	f7ff fda4 	bl	8000c10 <LCD_RD_DATA>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <lcd_init+0x2b8>)
 80010ce:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010d0:	f7ff fd9e 	bl	8000c10 <LCD_RD_DATA>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b9a      	ldr	r3, [pc, #616]	; (8001344 <lcd_init+0x2b8>)
 80010da:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010dc:	f7ff fd98 	bl	8000c10 <LCD_RD_DATA>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b97      	ldr	r3, [pc, #604]	; (8001344 <lcd_init+0x2b8>)
 80010e6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80010e8:	4b96      	ldr	r3, [pc, #600]	; (8001344 <lcd_init+0x2b8>)
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b94      	ldr	r3, [pc, #592]	; (8001344 <lcd_init+0x2b8>)
 80010f2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80010f4:	f7ff fd8c 	bl	8000c10 <LCD_RD_DATA>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b91      	ldr	r3, [pc, #580]	; (8001344 <lcd_init+0x2b8>)
 80010fe:	889b      	ldrh	r3, [r3, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b8f      	ldr	r3, [pc, #572]	; (8001344 <lcd_init+0x2b8>)
 8001106:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001108:	20cf      	movs	r0, #207	; 0xcf
 800110a:	f7ff fd61 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fd6e 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001114:	20c1      	movs	r0, #193	; 0xc1
 8001116:	f7ff fd6b 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800111a:	2030      	movs	r0, #48	; 0x30
 800111c:	f7ff fd68 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001120:	20ed      	movs	r0, #237	; 0xed
 8001122:	f7ff fd55 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f7ff fd62 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff fd5f 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001132:	2012      	movs	r0, #18
 8001134:	f7ff fd5c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001138:	2081      	movs	r0, #129	; 0x81
 800113a:	f7ff fd59 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800113e:	20e8      	movs	r0, #232	; 0xe8
 8001140:	f7ff fd46 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001144:	2085      	movs	r0, #133	; 0x85
 8001146:	f7ff fd53 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800114a:	2010      	movs	r0, #16
 800114c:	f7ff fd50 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001150:	207a      	movs	r0, #122	; 0x7a
 8001152:	f7ff fd4d 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001156:	20cb      	movs	r0, #203	; 0xcb
 8001158:	f7ff fd3a 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800115c:	2039      	movs	r0, #57	; 0x39
 800115e:	f7ff fd47 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001162:	202c      	movs	r0, #44	; 0x2c
 8001164:	f7ff fd44 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fd41 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800116e:	2034      	movs	r0, #52	; 0x34
 8001170:	f7ff fd3e 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff fd3b 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800117a:	20f7      	movs	r0, #247	; 0xf7
 800117c:	f7ff fd28 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001180:	2020      	movs	r0, #32
 8001182:	f7ff fd35 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001186:	20ea      	movs	r0, #234	; 0xea
 8001188:	f7ff fd22 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fd2f 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fd2c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001198:	20c0      	movs	r0, #192	; 0xc0
 800119a:	f7ff fd19 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800119e:	201b      	movs	r0, #27
 80011a0:	f7ff fd26 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011a4:	20c1      	movs	r0, #193	; 0xc1
 80011a6:	f7ff fd13 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fd20 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011b0:	20c5      	movs	r0, #197	; 0xc5
 80011b2:	f7ff fd0d 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011b6:	2030      	movs	r0, #48	; 0x30
 80011b8:	f7ff fd1a 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011bc:	2030      	movs	r0, #48	; 0x30
 80011be:	f7ff fd17 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011c2:	20c7      	movs	r0, #199	; 0xc7
 80011c4:	f7ff fd04 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011c8:	20b7      	movs	r0, #183	; 0xb7
 80011ca:	f7ff fd11 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011ce:	2036      	movs	r0, #54	; 0x36
 80011d0:	f7ff fcfe 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80011d4:	2008      	movs	r0, #8
 80011d6:	f7ff fd0b 	bl	8000bf0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80011da:	203a      	movs	r0, #58	; 0x3a
 80011dc:	f7ff fcf8 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011e0:	2055      	movs	r0, #85	; 0x55
 80011e2:	f7ff fd05 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011e6:	20b1      	movs	r0, #177	; 0xb1
 80011e8:	f7ff fcf2 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fcff 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80011f2:	201a      	movs	r0, #26
 80011f4:	f7ff fcfc 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80011f8:	20b6      	movs	r0, #182	; 0xb6
 80011fa:	f7ff fce9 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff fcf6 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001204:	20a2      	movs	r0, #162	; 0xa2
 8001206:	f7ff fcf3 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800120a:	20f2      	movs	r0, #242	; 0xf2
 800120c:	f7ff fce0 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fced 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001216:	2026      	movs	r0, #38	; 0x26
 8001218:	f7ff fcda 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fce7 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001222:	20e0      	movs	r0, #224	; 0xe0
 8001224:	f7ff fcd4 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001228:	200f      	movs	r0, #15
 800122a:	f7ff fce1 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800122e:	202a      	movs	r0, #42	; 0x2a
 8001230:	f7ff fcde 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001234:	2028      	movs	r0, #40	; 0x28
 8001236:	f7ff fcdb 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800123a:	2008      	movs	r0, #8
 800123c:	f7ff fcd8 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001240:	200e      	movs	r0, #14
 8001242:	f7ff fcd5 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001246:	2008      	movs	r0, #8
 8001248:	f7ff fcd2 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800124c:	2054      	movs	r0, #84	; 0x54
 800124e:	f7ff fccf 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001252:	20a9      	movs	r0, #169	; 0xa9
 8001254:	f7ff fccc 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001258:	2043      	movs	r0, #67	; 0x43
 800125a:	f7ff fcc9 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800125e:	200a      	movs	r0, #10
 8001260:	f7ff fcc6 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001264:	200f      	movs	r0, #15
 8001266:	f7ff fcc3 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fcc0 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fcbd 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fcba 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fcb7 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001282:	20e1      	movs	r0, #225	; 0xe1
 8001284:	f7ff fca4 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fcb1 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800128e:	2015      	movs	r0, #21
 8001290:	f7ff fcae 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001294:	2017      	movs	r0, #23
 8001296:	f7ff fcab 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800129a:	2007      	movs	r0, #7
 800129c:	f7ff fca8 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012a0:	2011      	movs	r0, #17
 80012a2:	f7ff fca5 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012a6:	2006      	movs	r0, #6
 80012a8:	f7ff fca2 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012ac:	202b      	movs	r0, #43	; 0x2b
 80012ae:	f7ff fc9f 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012b2:	2056      	movs	r0, #86	; 0x56
 80012b4:	f7ff fc9c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012b8:	203c      	movs	r0, #60	; 0x3c
 80012ba:	f7ff fc99 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012be:	2005      	movs	r0, #5
 80012c0:	f7ff fc96 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012c4:	2010      	movs	r0, #16
 80012c6:	f7ff fc93 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f7ff fc90 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012d0:	203f      	movs	r0, #63	; 0x3f
 80012d2:	f7ff fc8d 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012d6:	203f      	movs	r0, #63	; 0x3f
 80012d8:	f7ff fc8a 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012dc:	200f      	movs	r0, #15
 80012de:	f7ff fc87 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012e2:	202b      	movs	r0, #43	; 0x2b
 80012e4:	f7ff fc74 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fc81 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fc7e 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fc7b 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80012fa:	203f      	movs	r0, #63	; 0x3f
 80012fc:	f7ff fc78 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001300:	202a      	movs	r0, #42	; 0x2a
 8001302:	f7ff fc65 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fc72 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fc6f 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fc6c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001318:	20ef      	movs	r0, #239	; 0xef
 800131a:	f7ff fc69 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800131e:	2011      	movs	r0, #17
 8001320:	f7ff fc56 	bl	8000bd0 <LCD_WR_REG>
	HAL_Delay(120);
 8001324:	2078      	movs	r0, #120	; 0x78
 8001326:	f001 f933 	bl	8002590 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800132a:	2029      	movs	r0, #41	; 0x29
 800132c:	f7ff fc50 	bl	8000bd0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <lcd_init+0x2bc>)
 8001338:	f001 fbfc 	bl	8002b34 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020800 	.word	0x40020800
 8001344:	20000144 	.word	0x20000144
 8001348:	40020000 	.word	0x40020000

0800134c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08b      	sub	sp, #44	; 0x2c
 8001350:	af04      	add	r7, sp, #16
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	461a      	mov	r2, r3
 8001356:	4603      	mov	r3, r0
 8001358:	81fb      	strh	r3, [r7, #14]
 800135a:	460b      	mov	r3, r1
 800135c:	81bb      	strh	r3, [r7, #12]
 800135e:	4613      	mov	r3, r2
 8001360:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800136a:	e048      	b.n	80013fe <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d145      	bne.n	80013fe <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <lcd_ShowStr+0xc4>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	1acb      	subs	r3, r1, r3
 8001384:	429a      	cmp	r2, r3
 8001386:	dc3f      	bgt.n	8001408 <lcd_ShowStr+0xbc>
 8001388:	89ba      	ldrh	r2, [r7, #12]
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <lcd_ShowStr+0xc4>)
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	4619      	mov	r1, r3
 8001390:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001394:	1acb      	subs	r3, r1, r3
 8001396:	429a      	cmp	r2, r3
 8001398:	dc36      	bgt.n	8001408 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b80      	cmp	r3, #128	; 0x80
 80013a0:	d902      	bls.n	80013a8 <lcd_ShowStr+0x5c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
 80013a6:	e02a      	b.n	80013fe <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b0d      	cmp	r3, #13
 80013ae:	d10b      	bne.n	80013c8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80013b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	89bb      	ldrh	r3, [r7, #12]
 80013b8:	4413      	add	r3, r2
 80013ba:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013bc:	8abb      	ldrh	r3, [r7, #20]
 80013be:	81fb      	strh	r3, [r7, #14]
					str++;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	e017      	b.n	80013f8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	88fc      	ldrh	r4, [r7, #6]
 80013ce:	89b9      	ldrh	r1, [r7, #12]
 80013d0:	89f8      	ldrh	r0, [r7, #14]
 80013d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	4623      	mov	r3, r4
 80013e4:	f7ff fcc4 	bl	8000d70 <lcd_ShowChar>
					x+=sizey/2;
 80013e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	4413      	add	r3, r2
 80013f6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3301      	adds	r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1b2      	bne.n	800136c <lcd_ShowStr+0x20>
 8001406:	e000      	b.n	800140a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001408:	bf00      	nop
			}
		}
	}
}
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	20000144 	.word	0x20000144

08001414 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af04      	add	r7, sp, #16
 800141a:	60ba      	str	r2, [r7, #8]
 800141c:	461a      	mov	r2, r3
 800141e:	4603      	mov	r3, r0
 8001420:	81fb      	strh	r3, [r7, #14]
 8001422:	460b      	mov	r3, r1
 8001424:	81bb      	strh	r3, [r7, #12]
 8001426:	4613      	mov	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f7fe fecc 	bl	80001c8 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <lcd_StrCenter+0x60>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	8afb      	ldrh	r3, [r7, #22]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	0fda      	lsrs	r2, r3, #31
 8001442:	4413      	add	r3, r2
 8001444:	105b      	asrs	r3, r3, #1
 8001446:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001448:	89fa      	ldrh	r2, [r7, #14]
 800144a:	8abb      	ldrh	r3, [r7, #20]
 800144c:	4413      	add	r3, r2
 800144e:	b298      	uxth	r0, r3
 8001450:	88fa      	ldrh	r2, [r7, #6]
 8001452:	89b9      	ldrh	r1, [r7, #12]
 8001454:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	8c3b      	ldrh	r3, [r7, #32]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f7ff ff70 	bl	800134c <lcd_ShowStr>
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000144 	.word	0x20000144

08001478 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2140      	movs	r1, #64	; 0x40
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <led7_init+0x14>)
 8001482:	f001 fb57 	bl	8002b34 <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021800 	.word	0x40021800

08001490 <led7_Scan>:

void led7_Scan(){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <led7_Scan+0x104>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <led7_Scan+0x104>)
 800149e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <led7_Scan+0x108>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a3d      	ldr	r2, [pc, #244]	; (800159c <led7_Scan+0x10c>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <led7_Scan+0x104>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <led7_Scan+0x104>)
 80014ba:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <led7_Scan+0x108>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d847      	bhi.n	8001554 <led7_Scan+0xc4>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <led7_Scan+0x3c>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014fb 	.word	0x080014fb
 80014d4:	08001519 	.word	0x08001519
 80014d8:	08001537 	.word	0x08001537
	case 0:
		spi_buffer |= 0x00b0;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <led7_Scan+0x104>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <led7_Scan+0x104>)
 80014e8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <led7_Scan+0x104>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <led7_Scan+0x104>)
 80014f6:	801a      	strh	r2, [r3, #0]
		break;
 80014f8:	e02d      	b.n	8001556 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <led7_Scan+0x104>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <led7_Scan+0x104>)
 8001506:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <led7_Scan+0x104>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	f023 0320 	bic.w	r3, r3, #32
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <led7_Scan+0x104>)
 8001514:	801a      	strh	r2, [r3, #0]
		break;
 8001516:	e01e      	b.n	8001556 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <led7_Scan+0x104>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <led7_Scan+0x104>)
 8001524:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <led7_Scan+0x104>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	f023 0310 	bic.w	r3, r3, #16
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <led7_Scan+0x104>)
 8001532:	801a      	strh	r2, [r3, #0]
		break;
 8001534:	e00f      	b.n	8001556 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <led7_Scan+0x104>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <led7_Scan+0x104>)
 8001542:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <led7_Scan+0x104>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <led7_Scan+0x104>)
 8001550:	801a      	strh	r2, [r3, #0]
		break;
 8001552:	e000      	b.n	8001556 <led7_Scan+0xc6>
	default:
		break;
 8001554:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <led7_Scan+0x108>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	425a      	negs	r2, r3
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	bf58      	it	pl
 8001568:	4253      	negpl	r3, r2
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <led7_Scan+0x108>)
 800156c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <led7_Scan+0x110>)
 8001574:	f001 fade 	bl	8002b34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001578:	2301      	movs	r3, #1
 800157a:	2202      	movs	r2, #2
 800157c:	4905      	ldr	r1, [pc, #20]	; (8001594 <led7_Scan+0x104>)
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <led7_Scan+0x114>)
 8001580:	f003 f8c9 	bl	8004716 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	2140      	movs	r1, #64	; 0x40
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <led7_Scan+0x110>)
 800158a:	f001 fad3 	bl	8002b34 <HAL_GPIO_WritePin>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000004 	.word	0x20000004
 8001598:	2000004c 	.word	0x2000004c
 800159c:	20000000 	.word	0x20000000
 80015a0:	40021800 	.word	0x40021800
 80015a4:	20000180 	.word	0x20000180

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ac:	f000 ff7e 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b0:	f000 f818 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f7ff f99e 	bl	80008f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015b8:	f000 fe9e 	bl	80022f8 <MX_TIM2_Init>
  MX_SPI1_Init();
 80015bc:	f000 fdb0 	bl	8002120 <MX_SPI1_Init>
  MX_FSMC_Init();
 80015c0:	f7ff f8c8 	bl	8000754 <MX_FSMC_Init>
  MX_I2C1_Init();
 80015c4:	f7ff fa8e 	bl	8000ae4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80015c8:	f000 f876 	bl	80016b8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fb7d 	bl	8000ccc <lcd_Clear>
 updateTime();
 80015d2:	f000 fbf9 	bl	8001dc8 <updateTime>
  while (1)
  {
	 fsm_automatic_run() ;
 80015d6:	f000 f899 	bl	800170c <fsm_automatic_run>
	 fsm_mannual_run() ;
 80015da:	f000 f93d 	bl	8001858 <fsm_mannual_run>
     alarm_timer_run() ;
 80015de:	f000 f8b3 	bl	8001748 <alarm_timer_run>
  {
 80015e2:	e7f8      	b.n	80015d6 <main+0x2e>

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fb68 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <SystemClock_Config+0xcc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <SystemClock_Config+0xcc>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <SystemClock_Config+0xcc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <SystemClock_Config+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <SystemClock_Config+0xd0>)
 800162e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <SystemClock_Config+0xd0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001648:	2310      	movs	r3, #16
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164c:	2302      	movs	r3, #2
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001650:	2300      	movs	r3, #0
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001654:	2308      	movs	r3, #8
 8001656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001658:	23a8      	movs	r3, #168	; 0xa8
 800165a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fb6b 	bl	8003d44 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001674:	f000 fc56 	bl	8001f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	230f      	movs	r3, #15
 800167a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2302      	movs	r3, #2
 800167e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800168a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800168e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2105      	movs	r1, #5
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fdcc 	bl	8004234 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016a2:	f000 fc3f 	bl	8001f24 <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3750      	adds	r7, #80	; 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <system_init+0x50>)
 80016c2:	f001 fa37 	bl	8002b34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <system_init+0x50>)
 80016cc:	f001 fa32 	bl	8002b34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <system_init+0x50>)
 80016d6:	f001 fa2d 	bl	8002b34 <HAL_GPIO_WritePin>
	  timer_init();
 80016da:	f000 fc29 	bl	8001f30 <timer_init>
	  led7_init();
 80016de:	f7ff fecb 	bl	8001478 <led7_init>
	  button_init();
 80016e2:	f7fe fef5 	bl	80004d0 <button_init>
	  lcd_init();
 80016e6:	f7ff fcd1 	bl	800108c <lcd_init>
	  ds3231_init();
 80016ea:	f7fe ff69 	bl	80005c0 <ds3231_init>
	  setTimer2(50);
 80016ee:	2032      	movs	r0, #50	; 0x32
 80016f0:	f000 fc28 	bl	8001f44 <setTimer2>
	  setTimer3(0) ;
 80016f4:	2000      	movs	r0, #0
 80016f6:	f000 fc41 	bl	8001f7c <setTimer3>
	  setTimer_MOD(500) ; // blink 2HZ
 80016fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016fe:	f000 fc77 	bl	8001ff0 <setTimer_MOD>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <fsm_automatic_run>:
	if(count_led_debug == 0){
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
	}
}

void fsm_automatic_run(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  switch(status){
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <fsm_automatic_run+0x34>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d110      	bne.n	800173a <fsm_automatic_run+0x2e>

	case 1:
	  while(!flag_timer2);
 8001718:	bf00      	nop
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <fsm_automatic_run+0x38>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0fb      	beq.n	800171a <fsm_automatic_run+0xe>
		  flag_timer2 = 0;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <fsm_automatic_run+0x38>)
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 8001728:	f7fe fede 	bl	80004e8 <button_Scan>
		  ds3231_ReadTime();
 800172c:	f7fe ffae 	bl	800068c <ds3231_ReadTime>
		  displayTime();
 8001730:	f000 fb7a 	bl	8001e28 <displayTime>
		  test_button() ;
 8001734:	f000 fb00 	bl	8001d38 <test_button>
		  break ;
 8001738:	bf00      	nop
  }

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20000058 	.word	0x20000058

08001748 <alarm_timer_run>:

void alarm_timer_run(){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af04      	add	r7, sp, #16



	 if(flag_timer_alarm == 1){
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <alarm_timer_run+0xfc>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d145      	bne.n	80017e2 <alarm_timer_run+0x9a>
			 alarm_second-- ;
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <alarm_timer_run+0x100>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3b01      	subs	r3, #1
 800175c:	4a3a      	ldr	r2, [pc, #232]	; (8001848 <alarm_timer_run+0x100>)
 800175e:	6013      	str	r3, [r2, #0]
			 if((alarm_second == 0)&&(alarm_minute > 0)){
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <alarm_timer_run+0x100>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d12a      	bne.n	80017be <alarm_timer_run+0x76>
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <alarm_timer_run+0x104>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	dd26      	ble.n	80017be <alarm_timer_run+0x76>
				 alarm_minute-- ;
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <alarm_timer_run+0x104>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	4a35      	ldr	r2, [pc, #212]	; (800184c <alarm_timer_run+0x104>)
 8001778:	6013      	str	r3, [r2, #0]

				 if((alarm_minute == 0)&&(alarm_hour > 0)){
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <alarm_timer_run+0x104>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <alarm_timer_run+0x52>
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <alarm_timer_run+0x108>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	dd07      	ble.n	800179a <alarm_timer_run+0x52>
					 alarm_hour-- ;
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <alarm_timer_run+0x108>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3b01      	subs	r3, #1
 8001790:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <alarm_timer_run+0x108>)
 8001792:	6013      	str	r3, [r2, #0]
					 alarm_minute = 59 ;
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <alarm_timer_run+0x104>)
 8001796:	223b      	movs	r2, #59	; 0x3b
 8001798:	601a      	str	r2, [r3, #0]
				 }
				 lcd_ShowIntNum(90, 70, alarm_minute, 2, RED, BLACK, 24);
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <alarm_timer_run+0x104>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	2318      	movs	r3, #24
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2302      	movs	r3, #2
 80017b0:	2146      	movs	r1, #70	; 0x46
 80017b2:	205a      	movs	r0, #90	; 0x5a
 80017b4:	f7ff fbc8 	bl	8000f48 <lcd_ShowIntNum>
				 alarm_second = 60 ;
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <alarm_timer_run+0x100>)
 80017ba:	223c      	movs	r2, #60	; 0x3c
 80017bc:	601a      	str	r2, [r3, #0]
			 }

			 flag_timer_alarm = 0 ;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <alarm_timer_run+0xfc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	801a      	strh	r2, [r3, #0]
			 lcd_ShowIntNum(140, 70, alarm_second, 2, RED, BLACK, 24);
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <alarm_timer_run+0x100>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	2318      	movs	r3, #24
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2302      	movs	r3, #2
 80017da:	2146      	movs	r1, #70	; 0x46
 80017dc:	208c      	movs	r0, #140	; 0x8c
 80017de:	f7ff fbb3 	bl	8000f48 <lcd_ShowIntNum>
		 }


		 if((alarm_second == 0)&&(alarm_minute==0)&&(alarm_hour == 0)){
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <alarm_timer_run+0x100>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d129      	bne.n	800183e <alarm_timer_run+0xf6>
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <alarm_timer_run+0x104>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d125      	bne.n	800183e <alarm_timer_run+0xf6>
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <alarm_timer_run+0x108>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d121      	bne.n	800183e <alarm_timer_run+0xf6>
			 alarm_second = 0 ;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <alarm_timer_run+0x100>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
			 setTimer_alarm(0);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 fbd7 	bl	8001fb4 <setTimer_alarm>
			 lcd_StrCenter(0, 2, "TIME IS OVER !!!", RED, BLUE, 16, 1);
 8001806:	2301      	movs	r3, #1
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2310      	movs	r3, #16
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	231f      	movs	r3, #31
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001816:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <alarm_timer_run+0x10c>)
 8001818:	2102      	movs	r1, #2
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fdfa 	bl	8001414 <lcd_StrCenter>
			 lcd_ShowIntNum(140, 70, alarm_second, 2, RED, BLACK, 24);
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <alarm_timer_run+0x100>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	2318      	movs	r3, #24
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	2300      	movs	r3, #0
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	2146      	movs	r1, #70	; 0x46
 8001838:	208c      	movs	r0, #140	; 0x8c
 800183a:	f7ff fb85 	bl	8000f48 <lcd_ShowIntNum>
	     }

}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000005e 	.word	0x2000005e
 8001848:	20000018 	.word	0x20000018
 800184c:	20000050 	.word	0x20000050
 8001850:	20000054 	.word	0x20000054
 8001854:	08005cf0 	.word	0x08005cf0

08001858 <fsm_mannual_run>:

void fsm_mannual_run(){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af04      	add	r7, sp, #16
	switch(status){
 800185e:	4ba0      	ldr	r3, [pc, #640]	; (8001ae0 <fsm_mannual_run+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3b02      	subs	r3, #2
 8001864:	2b05      	cmp	r3, #5
 8001866:	f200 8256 	bhi.w	8001d16 <fsm_mannual_run+0x4be>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <fsm_mannual_run+0x18>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001889 	.word	0x08001889
 8001874:	08001947 	.word	0x08001947
 8001878:	0800195b 	.word	0x0800195b
 800187c:	08001a0b 	.word	0x08001a0b
 8001880:	08001b0d 	.word	0x08001b0d
 8001884:	08001be1 	.word	0x08001be1
	case 2: // modify hour
		setTimer3(50) ;
 8001888:	2032      	movs	r0, #50	; 0x32
 800188a:	f000 fb77 	bl	8001f7c <setTimer3>
		setTimer2(0) ;
 800188e:	2000      	movs	r0, #0
 8001890:	f000 fb58 	bl	8001f44 <setTimer2>


        //blink hour 2Hz
		if(flag_timer_MOD == 0){lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24); }
 8001894:	4b93      	ldr	r3, [pc, #588]	; (8001ae4 <fsm_mannual_run+0x28c>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10e      	bne.n	80018ba <fsm_mannual_run+0x62>
 800189c:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <fsm_mannual_run+0x290>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	2318      	movs	r3, #24
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2302      	movs	r3, #2
 80018b2:	2164      	movs	r1, #100	; 0x64
 80018b4:	2046      	movs	r0, #70	; 0x46
 80018b6:	f7ff fb47 	bl	8000f48 <lcd_ShowIntNum>
     	if(flag_timer_MOD == 1){flag_timer_MOD = 0 ;lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);}
 80018ba:	4b8a      	ldr	r3, [pc, #552]	; (8001ae4 <fsm_mannual_run+0x28c>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d110      	bne.n	80018e4 <fsm_mannual_run+0x8c>
 80018c2:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <fsm_mannual_run+0x28c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]
 80018c8:	4b87      	ldr	r3, [pc, #540]	; (8001ae8 <fsm_mannual_run+0x290>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	2318      	movs	r3, #24
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	2300      	movs	r3, #0
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2302      	movs	r3, #2
 80018dc:	2164      	movs	r1, #100	; 0x64
 80018de:	2046      	movs	r0, #70	; 0x46
 80018e0:	f7ff fb32 	bl	8000f48 <lcd_ShowIntNum>


		while(!flag_timer3);
 80018e4:	bf00      	nop
 80018e6:	4b81      	ldr	r3, [pc, #516]	; (8001aec <fsm_mannual_run+0x294>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0fb      	beq.n	80018e6 <fsm_mannual_run+0x8e>
				  flag_timer3 = 0;
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <fsm_mannual_run+0x294>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	801a      	strh	r2, [r3, #0]
				  button_Scan();
 80018f4:	f7fe fdf8 	bl	80004e8 <button_Scan>
				  if(button_count[3] == 1){	hour = hour + 1;
 80018f8:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <fsm_mannual_run+0x298>)
 80018fa:	88db      	ldrh	r3, [r3, #6]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d111      	bne.n	8001924 <fsm_mannual_run+0xcc>
 8001900:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <fsm_mannual_run+0x29c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a7b      	ldr	r2, [pc, #492]	; (8001af4 <fsm_mannual_run+0x29c>)
 8001908:	6013      	str	r3, [r2, #0]
				                            if(hour > 24){ hour = 1 ;}
 800190a:	4b7a      	ldr	r3, [pc, #488]	; (8001af4 <fsm_mannual_run+0x29c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b18      	cmp	r3, #24
 8001910:	dd02      	ble.n	8001918 <fsm_mannual_run+0xc0>
 8001912:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <fsm_mannual_run+0x29c>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
				                            updateTime() ;
 8001918:	f000 fa56 	bl	8001dc8 <updateTime>
				                            ds3231_ReadTime();
 800191c:	f7fe feb6 	bl	800068c <ds3231_ReadTime>
				                            displayTime();      }
 8001920:	f000 fa82 	bl	8001e28 <displayTime>

				  if(button_count[12] == 1){ status = 4 ; }
 8001924:	4b72      	ldr	r3, [pc, #456]	; (8001af0 <fsm_mannual_run+0x298>)
 8001926:	8b1b      	ldrh	r3, [r3, #24]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d102      	bne.n	8001932 <fsm_mannual_run+0xda>
 800192c:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <fsm_mannual_run+0x288>)
 800192e:	2204      	movs	r2, #4
 8001930:	601a      	str	r2, [r3, #0]
				  if(button_count[4] == 1){ status  = 5 ; }
 8001932:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <fsm_mannual_run+0x298>)
 8001934:	891b      	ldrh	r3, [r3, #8]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <fsm_mannual_run+0xe8>
 800193a:	4b69      	ldr	r3, [pc, #420]	; (8001ae0 <fsm_mannual_run+0x288>)
 800193c:	2205      	movs	r2, #5
 800193e:	601a      	str	r2, [r3, #0]
				  test_button() ;
 8001940:	f000 f9fa 	bl	8001d38 <test_button>
				  break ;
 8001944:	e1e7      	b.n	8001d16 <fsm_mannual_run+0x4be>

	case 3: //back to auto
		setTimer3(0);
 8001946:	2000      	movs	r0, #0
 8001948:	f000 fb18 	bl	8001f7c <setTimer3>
		setTimer2(50);
 800194c:	2032      	movs	r0, #50	; 0x32
 800194e:	f000 faf9 	bl	8001f44 <setTimer2>
		status = 1 ;
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <fsm_mannual_run+0x288>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
		break ;
 8001958:	e1dd      	b.n	8001d16 <fsm_mannual_run+0x4be>

	case 4:  // modify minute
		setTimer3(50) ;
 800195a:	2032      	movs	r0, #50	; 0x32
 800195c:	f000 fb0e 	bl	8001f7c <setTimer3>
		setTimer2(0) ;
 8001960:	2000      	movs	r0, #0
 8001962:	f000 faef 	bl	8001f44 <setTimer2>

		//blink minute 2HZ
		if(flag_timer_MOD == 0){lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24); }
 8001966:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <fsm_mannual_run+0x28c>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10e      	bne.n	800198c <fsm_mannual_run+0x134>
 800196e:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <fsm_mannual_run+0x2a0>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b29a      	uxth	r2, r3
 8001974:	2318      	movs	r3, #24
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2302      	movs	r3, #2
 8001984:	2164      	movs	r1, #100	; 0x64
 8001986:	206e      	movs	r0, #110	; 0x6e
 8001988:	f7ff fade 	bl	8000f48 <lcd_ShowIntNum>
     	if(flag_timer_MOD == 1){ flag_timer_MOD = 0 ; lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);}
 800198c:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <fsm_mannual_run+0x28c>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d110      	bne.n	80019b6 <fsm_mannual_run+0x15e>
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <fsm_mannual_run+0x28c>)
 8001996:	2200      	movs	r2, #0
 8001998:	801a      	strh	r2, [r3, #0]
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <fsm_mannual_run+0x2a0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2318      	movs	r3, #24
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2300      	movs	r3, #0
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2302      	movs	r3, #2
 80019ae:	2164      	movs	r1, #100	; 0x64
 80019b0:	206e      	movs	r0, #110	; 0x6e
 80019b2:	f7ff fac9 	bl	8000f48 <lcd_ShowIntNum>

				while(!flag_timer3);
 80019b6:	bf00      	nop
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <fsm_mannual_run+0x294>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0fb      	beq.n	80019b8 <fsm_mannual_run+0x160>
						  flag_timer3 = 0;
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <fsm_mannual_run+0x294>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	801a      	strh	r2, [r3, #0]
						  button_Scan();
 80019c6:	f7fe fd8f 	bl	80004e8 <button_Scan>
						  if(button_count[3] == 1){	minute = minute + 1;
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <fsm_mannual_run+0x298>)
 80019cc:	88db      	ldrh	r3, [r3, #6]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d111      	bne.n	80019f6 <fsm_mannual_run+0x19e>
 80019d2:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <fsm_mannual_run+0x2a4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a48      	ldr	r2, [pc, #288]	; (8001afc <fsm_mannual_run+0x2a4>)
 80019da:	6013      	str	r3, [r2, #0]
						                            if(minute > 60){minute = 1 ;}
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <fsm_mannual_run+0x2a4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b3c      	cmp	r3, #60	; 0x3c
 80019e2:	dd02      	ble.n	80019ea <fsm_mannual_run+0x192>
 80019e4:	4b45      	ldr	r3, [pc, #276]	; (8001afc <fsm_mannual_run+0x2a4>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
						                            updateTime() ;
 80019ea:	f000 f9ed 	bl	8001dc8 <updateTime>
						                            ds3231_ReadTime();
 80019ee:	f7fe fe4d 	bl	800068c <ds3231_ReadTime>
						                            displayTime();}
 80019f2:	f000 fa19 	bl	8001e28 <displayTime>

						  if(button_count[12] == 1){ status = 4 ; }
 80019f6:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <fsm_mannual_run+0x298>)
 80019f8:	8b1b      	ldrh	r3, [r3, #24]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <fsm_mannual_run+0x1ac>
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <fsm_mannual_run+0x288>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
						  test_button() ;
 8001a04:	f000 f998 	bl	8001d38 <test_button>
						  break ;
 8001a08:	e185      	b.n	8001d16 <fsm_mannual_run+0x4be>


	case 5: //modify alarm second

		lcd_ShowIntNum(40, 70, alarm_hour, 2, RED, BLACK, 24);
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <fsm_mannual_run+0x2a8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2318      	movs	r3, #24
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2300      	movs	r3, #0
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2302      	movs	r3, #2
 8001a20:	2146      	movs	r1, #70	; 0x46
 8001a22:	2028      	movs	r0, #40	; 0x28
 8001a24:	f7ff fa90 	bl	8000f48 <lcd_ShowIntNum>
		lcd_ShowIntNum(90, 70, alarm_minute, 2, RED, BLACK, 24);
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <fsm_mannual_run+0x2ac>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	2318      	movs	r3, #24
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	2146      	movs	r1, #70	; 0x46
 8001a40:	205a      	movs	r0, #90	; 0x5a
 8001a42:	f7ff fa81 	bl	8000f48 <lcd_ShowIntNum>

		if(flag_timer_MOD == 0){lcd_ShowIntNum(140, 70, alarm_second, 2, RED, BLACK, 24); }
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <fsm_mannual_run+0x28c>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10e      	bne.n	8001a6c <fsm_mannual_run+0x214>
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <fsm_mannual_run+0x2b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2318      	movs	r3, #24
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2302      	movs	r3, #2
 8001a64:	2146      	movs	r1, #70	; 0x46
 8001a66:	208c      	movs	r0, #140	; 0x8c
 8001a68:	f7ff fa6e 	bl	8000f48 <lcd_ShowIntNum>
		if(flag_timer_MOD == 1){flag_timer_MOD = 0; lcd_ShowIntNum(140, 70, alarm_second, 2, BLACK, BLACK, 24);}
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <fsm_mannual_run+0x28c>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d110      	bne.n	8001a96 <fsm_mannual_run+0x23e>
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <fsm_mannual_run+0x28c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	801a      	strh	r2, [r3, #0]
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <fsm_mannual_run+0x2b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	2318      	movs	r3, #24
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	2146      	movs	r1, #70	; 0x46
 8001a90:	208c      	movs	r0, #140	; 0x8c
 8001a92:	f7ff fa59 	bl	8000f48 <lcd_ShowIntNum>
		while(!flag_timer3);
 8001a96:	bf00      	nop
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <fsm_mannual_run+0x294>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0fb      	beq.n	8001a98 <fsm_mannual_run+0x240>
			flag_timer3 = 0;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <fsm_mannual_run+0x294>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
		    button_Scan();
 8001aa6:	f7fe fd1f 	bl	80004e8 <button_Scan>
			if(button_count[3] == 1){ alarm_second++ ; if(alarm_second > 60){ alarm_second = 1 ; }  }
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <fsm_mannual_run+0x298>)
 8001aac:	88db      	ldrh	r3, [r3, #6]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10b      	bne.n	8001aca <fsm_mannual_run+0x272>
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <fsm_mannual_run+0x2b0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <fsm_mannual_run+0x2b0>)
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <fsm_mannual_run+0x2b0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b3c      	cmp	r3, #60	; 0x3c
 8001ac2:	dd02      	ble.n	8001aca <fsm_mannual_run+0x272>
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <fsm_mannual_run+0x2b0>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
								  //ds3231_ReadTime();

								  if(button_count[12] == 1){ //alarm_num = alarm_num * 1000 ;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <fsm_mannual_run+0x298>)
 8001acc:	8b1b      	ldrh	r3, [r3, #24]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <fsm_mannual_run+0x280>
								  status = 6 ; }
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <fsm_mannual_run+0x288>)
 8001ad4:	2206      	movs	r2, #6
 8001ad6:	601a      	str	r2, [r3, #0]
								  test_button() ;
 8001ad8:	f000 f92e 	bl	8001d38 <test_button>
		                          break ;
 8001adc:	e11b      	b.n	8001d16 <fsm_mannual_run+0x4be>
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	2000005c 	.word	0x2000005c
 8001ae8:	20000095 	.word	0x20000095
 8001aec:	2000005a 	.word	0x2000005a
 8001af0:	20000070 	.word	0x20000070
 8001af4:	2000000c 	.word	0x2000000c
 8001af8:	20000092 	.word	0x20000092
 8001afc:	20000010 	.word	0x20000010
 8001b00:	20000054 	.word	0x20000054
 8001b04:	20000050 	.word	0x20000050
 8001b08:	20000018 	.word	0x20000018

	case 6:  //modify minute alarm
		lcd_ShowIntNum(140, 70, alarm_second, 2, RED, BLACK, 24);
 8001b0c:	4b83      	ldr	r3, [pc, #524]	; (8001d1c <fsm_mannual_run+0x4c4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	2318      	movs	r3, #24
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2302      	movs	r3, #2
 8001b22:	2146      	movs	r1, #70	; 0x46
 8001b24:	208c      	movs	r0, #140	; 0x8c
 8001b26:	f7ff fa0f 	bl	8000f48 <lcd_ShowIntNum>
		lcd_ShowIntNum(40, 70, alarm_hour, 2, RED, BLACK, 24);
 8001b2a:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	2318      	movs	r3, #24
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2300      	movs	r3, #0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2302      	movs	r3, #2
 8001b40:	2146      	movs	r1, #70	; 0x46
 8001b42:	2028      	movs	r0, #40	; 0x28
 8001b44:	f7ff fa00 	bl	8000f48 <lcd_ShowIntNum>


		if(flag_timer_MOD == 0){lcd_ShowIntNum(90, 70, alarm_minute, 2, RED, BLACK, 24); }
 8001b48:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <fsm_mannual_run+0x4cc>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10e      	bne.n	8001b6e <fsm_mannual_run+0x316>
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	2318      	movs	r3, #24
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2302      	movs	r3, #2
 8001b66:	2146      	movs	r1, #70	; 0x46
 8001b68:	205a      	movs	r0, #90	; 0x5a
 8001b6a:	f7ff f9ed 	bl	8000f48 <lcd_ShowIntNum>
	    if(flag_timer_MOD == 1){flag_timer_MOD = 0; lcd_ShowIntNum(90, 70, alarm_minute, 2, BLACK, BLACK, 24);}
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <fsm_mannual_run+0x4cc>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d110      	bne.n	8001b98 <fsm_mannual_run+0x340>
 8001b76:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <fsm_mannual_run+0x4cc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	2318      	movs	r3, #24
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	2146      	movs	r1, #70	; 0x46
 8001b92:	205a      	movs	r0, #90	; 0x5a
 8001b94:	f7ff f9d8 	bl	8000f48 <lcd_ShowIntNum>

		while(!flag_timer3);
 8001b98:	bf00      	nop
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <fsm_mannual_run+0x4d4>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0fb      	beq.n	8001b9a <fsm_mannual_run+0x342>
			flag_timer3 = 0;
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <fsm_mannual_run+0x4d4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
			button_Scan();
 8001ba8:	f7fe fc9e 	bl	80004e8 <button_Scan>
		    if(button_count[3] == 1){  alarm_minute++;  if(alarm_minute > 60){ alarm_minute = 1 ; }}
 8001bac:	4b60      	ldr	r3, [pc, #384]	; (8001d30 <fsm_mannual_run+0x4d8>)
 8001bae:	88db      	ldrh	r3, [r3, #6]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10b      	bne.n	8001bcc <fsm_mannual_run+0x374>
 8001bb4:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a5b      	ldr	r2, [pc, #364]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b3c      	cmp	r3, #60	; 0x3c
 8001bc4:	dd02      	ble.n	8001bcc <fsm_mannual_run+0x374>
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

		    if(button_count[12] == 1){ 	status = 7 ;}
 8001bcc:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <fsm_mannual_run+0x4d8>)
 8001bce:	8b1b      	ldrh	r3, [r3, #24]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <fsm_mannual_run+0x382>
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <fsm_mannual_run+0x4dc>)
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	601a      	str	r2, [r3, #0]
			test_button() ;
 8001bda:	f000 f8ad 	bl	8001d38 <test_button>

		break ;
 8001bde:	e09a      	b.n	8001d16 <fsm_mannual_run+0x4be>


	case 7://modify minute hour
		lcd_ShowIntNum(140, 70, alarm_second, 2, RED, BLACK, 24);
 8001be0:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <fsm_mannual_run+0x4c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	2318      	movs	r3, #24
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2300      	movs	r3, #0
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	2146      	movs	r1, #70	; 0x46
 8001bf8:	208c      	movs	r0, #140	; 0x8c
 8001bfa:	f7ff f9a5 	bl	8000f48 <lcd_ShowIntNum>
		lcd_ShowIntNum(90, 70, alarm_minute, 2, RED, BLACK, 24);
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2318      	movs	r3, #24
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2302      	movs	r3, #2
 8001c14:	2146      	movs	r1, #70	; 0x46
 8001c16:	205a      	movs	r0, #90	; 0x5a
 8001c18:	f7ff f996 	bl	8000f48 <lcd_ShowIntNum>

		if(flag_timer_MOD == 0){lcd_ShowIntNum(40, 70, alarm_hour, 2, RED, BLACK, 24); }
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <fsm_mannual_run+0x4cc>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10e      	bne.n	8001c42 <fsm_mannual_run+0x3ea>
 8001c24:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	2318      	movs	r3, #24
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	2146      	movs	r1, #70	; 0x46
 8001c3c:	2028      	movs	r0, #40	; 0x28
 8001c3e:	f7ff f983 	bl	8000f48 <lcd_ShowIntNum>
	    if(flag_timer_MOD == 1){flag_timer_MOD = 0; lcd_ShowIntNum(40, 70, alarm_hour, 2, BLACK, BLACK, 24);}
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <fsm_mannual_run+0x4cc>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d110      	bne.n	8001c6c <fsm_mannual_run+0x414>
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <fsm_mannual_run+0x4cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	2318      	movs	r3, #24
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2302      	movs	r3, #2
 8001c64:	2146      	movs	r1, #70	; 0x46
 8001c66:	2028      	movs	r0, #40	; 0x28
 8001c68:	f7ff f96e 	bl	8000f48 <lcd_ShowIntNum>

		while(!flag_timer3);
 8001c6c:	bf00      	nop
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <fsm_mannual_run+0x4d4>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0fb      	beq.n	8001c6e <fsm_mannual_run+0x416>
				flag_timer3 = 0;
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <fsm_mannual_run+0x4d4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	801a      	strh	r2, [r3, #0]
				button_Scan();
 8001c7c:	f7fe fc34 	bl	80004e8 <button_Scan>
				if(button_count[3] == 1){  alarm_hour++;  if(alarm_hour > 24){ alarm_hour = 1 ; }  }
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <fsm_mannual_run+0x4d8>)
 8001c82:	88db      	ldrh	r3, [r3, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10b      	bne.n	8001ca0 <fsm_mannual_run+0x448>
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b18      	cmp	r3, #24
 8001c98:	dd02      	ble.n	8001ca0 <fsm_mannual_run+0x448>
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

				if(button_count[12] == 1){
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <fsm_mannual_run+0x4d8>)
 8001ca2:	8b1b      	ldrh	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d133      	bne.n	8001d10 <fsm_mannual_run+0x4b8>
											status = 3 ;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <fsm_mannual_run+0x4dc>)
 8001caa:	2203      	movs	r2, #3
 8001cac:	601a      	str	r2, [r3, #0]
											lcd_ShowIntNum(40, 70, alarm_hour, 2, RED, BLACK, 24);
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <fsm_mannual_run+0x4c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	2318      	movs	r3, #24
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	2146      	movs	r1, #70	; 0x46
 8001cc6:	2028      	movs	r0, #40	; 0x28
 8001cc8:	f7ff f93e 	bl	8000f48 <lcd_ShowIntNum>
										    lcd_ShowIntNum(90, 70, alarm_minute, 2, RED, BLACK, 24);
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <fsm_mannual_run+0x4d0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	2318      	movs	r3, #24
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	2146      	movs	r1, #70	; 0x46
 8001ce4:	205a      	movs	r0, #90	; 0x5a
 8001ce6:	f7ff f92f 	bl	8000f48 <lcd_ShowIntNum>
											lcd_ShowIntNum(140, 70, alarm_second, 2, RED, BLACK, 24);
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <fsm_mannual_run+0x4c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	2318      	movs	r3, #24
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	2146      	movs	r1, #70	; 0x46
 8001d02:	208c      	movs	r0, #140	; 0x8c
 8001d04:	f7ff f920 	bl	8000f48 <lcd_ShowIntNum>
											setTimer_alarm(1000) ;}
 8001d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d0c:	f000 f952 	bl	8001fb4 <setTimer_alarm>
			   test_button() ;
 8001d10:	f000 f812 	bl	8001d38 <test_button>


		break ;
 8001d14:	bf00      	nop




	}
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000018 	.word	0x20000018
 8001d20:	20000054 	.word	0x20000054
 8001d24:	2000005c 	.word	0x2000005c
 8001d28:	20000050 	.word	0x20000050
 8001d2c:	2000005a 	.word	0x2000005a
 8001d30:	20000070 	.word	0x20000070
 8001d34:	20000008 	.word	0x20000008

08001d38 <test_button>:
	led7_SetDigit(0, 0, 0);
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}
void test_button(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af04      	add	r7, sp, #16
	for(int i = 0; i < 16; i++){
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	e032      	b.n	8001daa <test_button+0x72>

		if(button_count[0] == 1){	status = 2; }
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <test_button+0x84>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d102      	bne.n	8001d52 <test_button+0x1a>
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <test_button+0x88>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
		if(button_count[1] == 1){	status = 3; }
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <test_button+0x84>)
 8001d54:	885b      	ldrh	r3, [r3, #2]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <test_button+0x28>
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <test_button+0x88>)
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	601a      	str	r2, [r3, #0]

		//if(button_count[1] == 1){	setTimer2(50) ;}

		if(button_count[11] == 1){
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <test_button+0x84>)
 8001d62:	8adb      	ldrh	r3, [r3, #22]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10c      	bne.n	8001d82 <test_button+0x4a>
			lcd_StrCenter(0, 2, "REAL TIME CLOCK !!!", RED, BLUE, 16, 1);
 8001d68:	2301      	movs	r3, #1
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	231f      	movs	r3, #31
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <test_button+0x8c>)
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fb49 	bl	8001414 <lcd_StrCenter>
		}

		if(button_count[15] == 1){
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <test_button+0x84>)
 8001d84:	8bdb      	ldrh	r3, [r3, #30]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10c      	bne.n	8001da4 <test_button+0x6c>
					lcd_StrCenter(0, 2, "REAL TIME CLOCK !!!", WHITE, BLUE, 16, 1);
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	2310      	movs	r3, #16
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	231f      	movs	r3, #31
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <test_button+0x8c>)
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff fb38 	bl	8001414 <lcd_StrCenter>
	for(int i = 0; i < 16; i++){
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3301      	adds	r3, #1
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	ddc9      	ble.n	8001d44 <test_button+0xc>
				}
	}
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000070 	.word	0x20000070
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	08005d04 	.word	0x08005d04

08001dc8 <updateTime>:

void updateTime(){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8001dcc:	2117      	movs	r1, #23
 8001dce:	2006      	movs	r0, #6
 8001dd0:	f7fe fc3a 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8001dd4:	210b      	movs	r1, #11
 8001dd6:	2005      	movs	r0, #5
 8001dd8:	f7fe fc36 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 16);
 8001ddc:	2110      	movs	r1, #16
 8001dde:	2004      	movs	r0, #4
 8001de0:	f7fe fc32 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 5);
 8001de4:	2105      	movs	r1, #5
 8001de6:	2003      	movs	r0, #3
 8001de8:	f7fe fc2e 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, hour);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <updateTime+0x54>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7fe fc27 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, minute);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <updateTime+0x58>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4619      	mov	r1, r3
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7fe fc20 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, second);
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <updateTime+0x5c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7fe fc19 	bl	8000648 <ds3231_Write>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20000010 	.word	0x20000010
 8001e24:	20000014 	.word	0x20000014

08001e28 <displayTime>:
    if (button_count[7] == 1)
        return 1;
    else
        return 0;
}
void displayTime(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <displayTime+0xe0>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	2318      	movs	r3, #24
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2302      	movs	r3, #2
 8001e44:	2164      	movs	r1, #100	; 0x64
 8001e46:	2046      	movs	r0, #70	; 0x46
 8001e48:	f7ff f87e 	bl	8000f48 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <displayTime+0xe4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	2318      	movs	r3, #24
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	2300      	movs	r3, #0
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2302      	movs	r3, #2
 8001e62:	2164      	movs	r1, #100	; 0x64
 8001e64:	206e      	movs	r0, #110	; 0x6e
 8001e66:	f7ff f86f 	bl	8000f48 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <displayTime+0xe8>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	2318      	movs	r3, #24
 8001e72:	9302      	str	r3, [sp, #8]
 8001e74:	2300      	movs	r3, #0
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2302      	movs	r3, #2
 8001e80:	2164      	movs	r1, #100	; 0x64
 8001e82:	2096      	movs	r0, #150	; 0x96
 8001e84:	f7ff f860 	bl	8000f48 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <displayTime+0xec>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	2318      	movs	r3, #24
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	2182      	movs	r1, #130	; 0x82
 8001ea0:	2014      	movs	r0, #20
 8001ea2:	f7ff f851 	bl	8000f48 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <displayTime+0xf0>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	2318      	movs	r3, #24
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2302      	movs	r3, #2
 8001ebc:	2182      	movs	r1, #130	; 0x82
 8001ebe:	2046      	movs	r0, #70	; 0x46
 8001ec0:	f7ff f842 	bl	8000f48 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <displayTime+0xf4>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	2318      	movs	r3, #24
 8001ecc:	9302      	str	r3, [sp, #8]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	2182      	movs	r1, #130	; 0x82
 8001edc:	206e      	movs	r0, #110	; 0x6e
 8001ede:	f7ff f833 	bl	8000f48 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <displayTime+0xf8>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2318      	movs	r3, #24
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	2182      	movs	r1, #130	; 0x82
 8001efa:	2096      	movs	r0, #150	; 0x96
 8001efc:	f7ff f824 	bl	8000f48 <lcd_ShowIntNum>
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000095 	.word	0x20000095
 8001f0c:	20000092 	.word	0x20000092
 8001f10:	20000090 	.word	0x20000090
 8001f14:	20000094 	.word	0x20000094
 8001f18:	20000093 	.word	0x20000093
 8001f1c:	20000096 	.word	0x20000096
 8001f20:	20000091 	.word	0x20000091

08001f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f28:	b672      	cpsid	i
}
 8001f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <Error_Handler+0x8>
	...

08001f30 <timer_init>:
uint16_t timer_MOD_MUL = 0;

uint16_t timer_alarm_counter = 0;
uint16_t timer_alarm_MUL = 0;

void timer_init(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <timer_init+0x10>)
 8001f36:	f003 f9a1 	bl	800527c <HAL_TIM_Base_Start_IT>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200001d8 	.word	0x200001d8

08001f44 <setTimer2>:

void setTimer2(uint16_t duration){
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <setTimer2+0x2c>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <setTimer2+0x2c>)
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <setTimer2+0x30>)
 8001f5a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <setTimer2+0x34>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	801a      	strh	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000062 	.word	0x20000062
 8001f74:	20000060 	.word	0x20000060
 8001f78:	20000058 	.word	0x20000058

08001f7c <setTimer3>:

void setTimer3(uint16_t duration){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <setTimer3+0x2c>)
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <setTimer3+0x2c>)
 8001f8e:	881a      	ldrh	r2, [r3, #0]
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <setTimer3+0x30>)
 8001f92:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <setTimer3+0x34>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	801a      	strh	r2, [r3, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000066 	.word	0x20000066
 8001fac:	20000064 	.word	0x20000064
 8001fb0:	2000005a 	.word	0x2000005a

08001fb4 <setTimer_alarm>:

void setTimer_alarm(uint16_t duration){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
	timer_alarm_MUL = duration/TIMER_CYCLE_2;
 8001fbe:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <setTimer_alarm+0x2c>)
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	8013      	strh	r3, [r2, #0]
	timer_alarm_counter = timer3_MUL;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <setTimer_alarm+0x30>)
 8001fc6:	881a      	ldrh	r2, [r3, #0]
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <setTimer_alarm+0x34>)
 8001fca:	801a      	strh	r2, [r3, #0]
	flag_timer_alarm = 0;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <setTimer_alarm+0x38>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	2000006e 	.word	0x2000006e
 8001fe4:	20000066 	.word	0x20000066
 8001fe8:	2000006c 	.word	0x2000006c
 8001fec:	2000005e 	.word	0x2000005e

08001ff0 <setTimer_MOD>:

void setTimer_MOD(uint16_t duration){
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
	timer_MOD_MUL = duration/TIMER_CYCLE_2;
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <setTimer_MOD+0x2c>)
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	8013      	strh	r3, [r2, #0]
	timer_MOD_counter = timer_MOD_MUL;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <setTimer_MOD+0x2c>)
 8002002:	881a      	ldrh	r2, [r3, #0]
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <setTimer_MOD+0x30>)
 8002006:	801a      	strh	r2, [r3, #0]
	flag_timer_MOD = 0;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <setTimer_MOD+0x34>)
 800200a:	2200      	movs	r2, #0
 800200c:	801a      	strh	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000006a 	.word	0x2000006a
 8002020:	20000068 	.word	0x20000068
 8002024:	2000005c 	.word	0x2000005c

08002028 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002038:	d155      	bne.n	80020e6 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(timer2_counter > 0){
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800204c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002058:	2201      	movs	r2, #1
 800205a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002062:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_TIM_PeriodElapsedCallback+0x66>
					timer3_counter--;
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002076:	801a      	strh	r2, [r3, #0]
					if(timer3_counter == 0) {
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <HAL_TIM_PeriodElapsedCallback+0x66>
						flag_timer3 = 1;
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002082:	2201      	movs	r2, #1
 8002084:	801a      	strh	r2, [r3, #0]
						timer3_counter = timer3_MUL;
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002088:	881a      	ldrh	r2, [r3, #0]
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800208c:	801a      	strh	r2, [r3, #0]
					}
				}

		if(timer_alarm_counter > 0){
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d010      	beq.n	80020b8 <HAL_TIM_PeriodElapsedCallback+0x90>
							timer_alarm_counter--;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80020a0:	801a      	strh	r2, [r3, #0]
							if(timer_alarm_counter == 0) {
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_TIM_PeriodElapsedCallback+0x90>
								flag_timer_alarm = 1;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	801a      	strh	r2, [r3, #0]
								timer_alarm_counter = timer_alarm_MUL;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80020b2:	881a      	ldrh	r2, [r3, #0]
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80020b6:	801a      	strh	r2, [r3, #0]
							}
						}

		if(timer_MOD_counter > 0){
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d010      	beq.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0xba>
							timer_MOD_counter--;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80020ca:	801a      	strh	r2, [r3, #0]
							if(timer_MOD_counter == 0) {
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0xba>
								flag_timer_MOD = 1;
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	801a      	strh	r2, [r3, #0]
								timer_MOD_counter = timer_MOD_MUL;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80020dc:	881a      	ldrh	r2, [r3, #0]
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80020e0:	801a      	strh	r2, [r3, #0]
							}
						}
		led7_Scan();
 80020e2:	f7ff f9d5 	bl	8001490 <led7_Scan>
	}
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000060 	.word	0x20000060
 80020f4:	20000058 	.word	0x20000058
 80020f8:	20000062 	.word	0x20000062
 80020fc:	20000064 	.word	0x20000064
 8002100:	2000005a 	.word	0x2000005a
 8002104:	20000066 	.word	0x20000066
 8002108:	2000006c 	.word	0x2000006c
 800210c:	2000005e 	.word	0x2000005e
 8002110:	2000006e 	.word	0x2000006e
 8002114:	20000068 	.word	0x20000068
 8002118:	2000005c 	.word	0x2000005c
 800211c:	2000006a 	.word	0x2000006a

08002120 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <MX_SPI1_Init+0x64>)
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <MX_SPI1_Init+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_SPI1_Init+0x64>)
 800212c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_SPI1_Init+0x64>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MX_SPI1_Init+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_SPI1_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_SPI1_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_SPI1_Init+0x64>)
 800214c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_SPI1_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <MX_SPI1_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_SPI1_Init+0x64>)
 8002160:	2200      	movs	r2, #0
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <MX_SPI1_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_SPI1_Init+0x64>)
 800216c:	220a      	movs	r2, #10
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002170:	4804      	ldr	r0, [pc, #16]	; (8002184 <MX_SPI1_Init+0x64>)
 8002172:	f002 fa47 	bl	8004604 <HAL_SPI_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800217c:	f7ff fed2 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000180 	.word	0x20000180
 8002188:	40013000 	.word	0x40013000

0800218c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_SPI_MspInit+0x84>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12b      	bne.n	8002206 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a17      	ldr	r2, [pc, #92]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_SPI_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80021e6:	2338      	movs	r3, #56	; 0x38
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f6:	2305      	movs	r3, #5
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <HAL_SPI_MspInit+0x8c>)
 8002202:	f000 fafb 	bl	80027fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40013000 	.word	0x40013000
 8002214:	40023800 	.word	0x40023800
 8002218:	40020400 	.word	0x40020400

0800221c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_MspInit+0x4c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_MspInit+0x4c>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_MspInit+0x4c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_MspInit+0x4c>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_MspInit+0x4c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <NMI_Handler+0x4>

08002272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <MemManage_Handler+0x4>

0800227e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <UsageFault_Handler+0x4>

0800228a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b8:	f000 f94a 	bl	8002550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM2_IRQHandler+0x10>)
 80022c6:	f003 f849 	bl	800535c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200001d8 	.word	0x200001d8

080022d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <SystemInit+0x20>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <SystemInit+0x20>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	463b      	mov	r3, r7
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <MX_TIM2_Init+0x94>)
 8002316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <MX_TIM2_Init+0x94>)
 800231e:	f240 3247 	movw	r2, #839	; 0x347
 8002322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <MX_TIM2_Init+0x94>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <MX_TIM2_Init+0x94>)
 800232c:	2263      	movs	r2, #99	; 0x63
 800232e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <MX_TIM2_Init+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_TIM2_Init+0x94>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800233c:	4813      	ldr	r0, [pc, #76]	; (800238c <MX_TIM2_Init+0x94>)
 800233e:	f002 ff4d 	bl	80051dc <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002348:	f7ff fdec 	bl	8001f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4619      	mov	r1, r3
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <MX_TIM2_Init+0x94>)
 800235a:	f003 f907 	bl	800556c <HAL_TIM_ConfigClockSource>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002364:	f7ff fdde 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_TIM2_Init+0x94>)
 8002376:	f003 fb23 	bl	80059c0 <HAL_TIMEx_MasterConfigSynchronization>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002380:	f7ff fdd0 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200001d8 	.word	0x200001d8

08002390 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d115      	bne.n	80023ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_TIM_Base_MspInit+0x48>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_TIM_Base_MspInit+0x48>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_TIM_Base_MspInit+0x48>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	201c      	movs	r0, #28
 80023c4:	f000 f9e3 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c8:	201c      	movs	r0, #28
 80023ca:	f000 f9fc 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4413      	add	r3, r2
 8002400:	b2db      	uxtb	r3, r3
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <DEC2BCD+0x44>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	08db      	lsrs	r3, r3, #3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	b258      	sxtb	r0, r3
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <DEC2BCD+0x44>)
 800242e:	fba3 1302 	umull	r1, r3, r3, r2
 8002432:	08d9      	lsrs	r1, r3, #3
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	b25b      	sxtb	r3, r3
 8002442:	4303      	orrs	r3, r0
 8002444:	b25b      	sxtb	r3, r3
 8002446:	b2db      	uxtb	r3, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	cccccccd 	.word	0xcccccccd

08002458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800245e:	490e      	ldr	r1, [pc, #56]	; (8002498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002460:	4a0e      	ldr	r2, [pc, #56]	; (800249c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002474:	4c0b      	ldr	r4, [pc, #44]	; (80024a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002482:	f7ff ff27 	bl	80022d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002486:	f003 fbfb 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248a:	f7ff f88d 	bl	80015a8 <main>
  bx  lr    
 800248e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800249c:	08008cc0 	.word	0x08008cc0
  ldr r2, =_sbss
 80024a0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80024a4:	20000224 	.word	0x20000224

080024a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_Init+0x40>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_Init+0x40>)
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_Init+0x40>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 f94f 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024da:	200f      	movs	r0, #15
 80024dc:	f000 f808 	bl	80024f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e0:	f7ff fe9c 	bl	800221c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00

080024f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x54>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_InitTick+0x58>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002506:	fbb3 f3f1 	udiv	r3, r3, r1
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f967 	bl	80027e2 <HAL_SYSTICK_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00e      	b.n	800253c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d80a      	bhi.n	800253a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002524:	2200      	movs	r2, #0
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f000 f92f 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <HAL_InitTick+0x5c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000001c 	.word	0x2000001c
 8002548:	20000024 	.word	0x20000024
 800254c:	20000020 	.word	0x20000020

08002550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x20>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_IncTick+0x24>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_IncTick+0x24>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000024 	.word	0x20000024
 8002574:	20000220 	.word	0x20000220

08002578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_GetTick+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000220 	.word	0x20000220

08002590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d005      	beq.n	80025b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_Delay+0x44>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025b6:	bf00      	nop
 80025b8:	f7ff ffde 	bl	8002578 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d8f7      	bhi.n	80025b8 <HAL_Delay+0x28>
  {
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000024 	.word	0x20000024

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff29 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff3e 	bl	8002620 <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff8e 	bl	80026cc <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff31 	bl	800263c <__NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffa2 	bl	8002734 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e16b      	b.n	8002af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 815a 	bne.w	8002aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d005      	beq.n	800284e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	2b02      	cmp	r3, #2
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80b4 	beq.w	8002aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <HAL_GPIO_Init+0x30c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a5f      	ldr	r2, [pc, #380]	; (8002b08 <HAL_GPIO_Init+0x30c>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <HAL_GPIO_Init+0x30c>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a5b      	ldr	r2, [pc, #364]	; (8002b0c <HAL_GPIO_Init+0x310>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_Init+0x314>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02b      	beq.n	8002a22 <HAL_GPIO_Init+0x226>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_GPIO_Init+0x318>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d025      	beq.n	8002a1e <HAL_GPIO_Init+0x222>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a50      	ldr	r2, [pc, #320]	; (8002b18 <HAL_GPIO_Init+0x31c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01f      	beq.n	8002a1a <HAL_GPIO_Init+0x21e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4f      	ldr	r2, [pc, #316]	; (8002b1c <HAL_GPIO_Init+0x320>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d019      	beq.n	8002a16 <HAL_GPIO_Init+0x21a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_GPIO_Init+0x324>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_GPIO_Init+0x216>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <HAL_GPIO_Init+0x328>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00d      	beq.n	8002a0e <HAL_GPIO_Init+0x212>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_GPIO_Init+0x32c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x20e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4b      	ldr	r2, [pc, #300]	; (8002b2c <HAL_GPIO_Init+0x330>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_GPIO_Init+0x20a>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e00e      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a06:	2308      	movs	r3, #8
 8002a08:	e00c      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a0a:	2306      	movs	r3, #6
 8002a0c:	e00a      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a0e:	2305      	movs	r3, #5
 8002a10:	e008      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e004      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x228>
 8002a22:	2300      	movs	r3, #0
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f002 0203 	and.w	r2, r2, #3
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a34:	4935      	ldr	r1, [pc, #212]	; (8002b0c <HAL_GPIO_Init+0x310>)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a66:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae4:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <HAL_GPIO_Init+0x334>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	f67f ae90 	bls.w	8002818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40021400 	.word	0x40021400
 8002b28:	40021800 	.word	0x40021800
 8002b2c:	40021c00 	.word	0x40021c00
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b50:	e003      	b.n	8002b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e12b      	b.n	8002dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fd ffd6 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bcc:	f001 fd06 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8002bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4a81      	ldr	r2, [pc, #516]	; (8002ddc <HAL_I2C_Init+0x274>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d807      	bhi.n	8002bec <HAL_I2C_Init+0x84>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a80      	ldr	r2, [pc, #512]	; (8002de0 <HAL_I2C_Init+0x278>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	bf94      	ite	ls
 8002be4:	2301      	movls	r3, #1
 8002be6:	2300      	movhi	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	e006      	b.n	8002bfa <HAL_I2C_Init+0x92>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a7d      	ldr	r2, [pc, #500]	; (8002de4 <HAL_I2C_Init+0x27c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	bf94      	ite	ls
 8002bf4:	2301      	movls	r3, #1
 8002bf6:	2300      	movhi	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0e7      	b.n	8002dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a78      	ldr	r2, [pc, #480]	; (8002de8 <HAL_I2C_Init+0x280>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0c9b      	lsrs	r3, r3, #18
 8002c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4a6a      	ldr	r2, [pc, #424]	; (8002ddc <HAL_I2C_Init+0x274>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d802      	bhi.n	8002c3c <HAL_I2C_Init+0xd4>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	e009      	b.n	8002c50 <HAL_I2C_Init+0xe8>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	4a69      	ldr	r2, [pc, #420]	; (8002dec <HAL_I2C_Init+0x284>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	3301      	adds	r3, #1
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	495c      	ldr	r1, [pc, #368]	; (8002ddc <HAL_I2C_Init+0x274>)
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	d819      	bhi.n	8002ca4 <HAL_I2C_Init+0x13c>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e59      	subs	r1, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c7e:	1c59      	adds	r1, r3, #1
 8002c80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c84:	400b      	ands	r3, r1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_I2C_Init+0x138>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1e59      	subs	r1, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9e:	e051      	b.n	8002d44 <HAL_I2C_Init+0x1dc>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	e04f      	b.n	8002d44 <HAL_I2C_Init+0x1dc>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d111      	bne.n	8002cd0 <HAL_I2C_Init+0x168>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e58      	subs	r0, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	440b      	add	r3, r1
 8002cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e012      	b.n	8002cf6 <HAL_I2C_Init+0x18e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	0099      	lsls	r1, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Init+0x196>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e022      	b.n	8002d44 <HAL_I2C_Init+0x1dc>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10e      	bne.n	8002d24 <HAL_I2C_Init+0x1bc>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1e58      	subs	r0, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	440b      	add	r3, r1
 8002d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d22:	e00f      	b.n	8002d44 <HAL_I2C_Init+0x1dc>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1e58      	subs	r0, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	0099      	lsls	r1, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	6809      	ldr	r1, [r1, #0]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6911      	ldr	r1, [r2, #16]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68d2      	ldr	r2, [r2, #12]
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	000186a0 	.word	0x000186a0
 8002de0:	001e847f 	.word	0x001e847f
 8002de4:	003d08ff 	.word	0x003d08ff
 8002de8:	431bde83 	.word	0x431bde83
 8002dec:	10624dd3 	.word	0x10624dd3

08002df0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e0a:	f7ff fbb5 	bl	8002578 <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	f040 80d9 	bne.w	8002fd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2319      	movs	r3, #25
 8002e24:	2201      	movs	r2, #1
 8002e26:	496d      	ldr	r1, [pc, #436]	; (8002fdc <HAL_I2C_Mem_Write+0x1ec>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fdad 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0cc      	b.n	8002fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Mem_Write+0x56>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0c5      	b.n	8002fd2 <HAL_I2C_Mem_Write+0x1e2>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d007      	beq.n	8002e6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2221      	movs	r2, #33	; 0x21
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2240      	movs	r2, #64	; 0x40
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a3a      	ldr	r2, [r7, #32]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a4d      	ldr	r2, [pc, #308]	; (8002fe0 <HAL_I2C_Mem_Write+0x1f0>)
 8002eac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eae:	88f8      	ldrh	r0, [r7, #6]
 8002eb0:	893a      	ldrh	r2, [r7, #8]
 8002eb2:	8979      	ldrh	r1, [r7, #10]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fbe4 	bl	800368c <I2C_RequestMemoryWrite>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d052      	beq.n	8002f70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e081      	b.n	8002fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fe2e 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d107      	bne.n	8002ef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e06b      	b.n	8002fd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d11b      	bne.n	8002f70 <HAL_I2C_Mem_Write+0x180>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d017      	beq.n	8002f70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1aa      	bne.n	8002ece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fe1a 	bl	8003bb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00d      	beq.n	8002fa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d107      	bne.n	8002fa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e016      	b.n	8002fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	00100002 	.word	0x00100002
 8002fe0:	ffff0000 	.word	0xffff0000

08002fe4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	; 0x30
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	4608      	mov	r0, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	817b      	strh	r3, [r7, #10]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	813b      	strh	r3, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f7ff fabb 	bl	8002578 <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b20      	cmp	r3, #32
 800300e:	f040 8208 	bne.w	8003422 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2319      	movs	r3, #25
 8003018:	2201      	movs	r2, #1
 800301a:	497b      	ldr	r1, [pc, #492]	; (8003208 <HAL_I2C_Mem_Read+0x224>)
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fcb3 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
 800302a:	e1fb      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_I2C_Mem_Read+0x56>
 8003036:	2302      	movs	r3, #2
 8003038:	e1f4      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d007      	beq.n	8003060 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2222      	movs	r2, #34	; 0x22
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a5b      	ldr	r2, [pc, #364]	; (800320c <HAL_I2C_Mem_Read+0x228>)
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030a2:	88f8      	ldrh	r0, [r7, #6]
 80030a4:	893a      	ldrh	r2, [r7, #8]
 80030a6:	8979      	ldrh	r1, [r7, #10]
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4603      	mov	r3, r0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fb80 	bl	80037b8 <I2C_RequestMemoryRead>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e1b0      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d113      	bne.n	80030f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e184      	b.n	80033fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d11b      	bne.n	8003132 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e164      	b.n	80033fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	2b02      	cmp	r3, #2
 8003138:	d11b      	bne.n	8003172 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	e144      	b.n	80033fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003188:	e138      	b.n	80033fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	2b03      	cmp	r3, #3
 8003190:	f200 80f1 	bhi.w	8003376 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	2b01      	cmp	r3, #1
 800319a:	d123      	bne.n	80031e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fd49 	bl	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e139      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e2:	e10b      	b.n	80033fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d14e      	bne.n	800328a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	2200      	movs	r2, #0
 80031f4:	4906      	ldr	r1, [pc, #24]	; (8003210 <HAL_I2C_Mem_Read+0x22c>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fbc6 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e10e      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
 8003206:	bf00      	nop
 8003208:	00100002 	.word	0x00100002
 800320c:	ffff0000 	.word	0xffff0000
 8003210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003288:	e0b8      	b.n	80033fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2200      	movs	r2, #0
 8003292:	4966      	ldr	r1, [pc, #408]	; (800342c <HAL_I2C_Mem_Read+0x448>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fb77 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0bf      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	2200      	movs	r2, #0
 80032ee:	494f      	ldr	r1, [pc, #316]	; (800342c <HAL_I2C_Mem_Read+0x448>)
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fb49 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e091      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003374:	e042      	b.n	80033fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fc5c 	bl	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e04c      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d118      	bne.n	80033fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	f47f aec2 	bne.w	800318a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	00010004 	.word	0x00010004

08003430 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	460b      	mov	r3, r1
 800343e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003440:	f7ff f89a 	bl	8002578 <HAL_GetTick>
 8003444:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 8111 	bne.w	800367a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2319      	movs	r3, #25
 800345e:	2201      	movs	r2, #1
 8003460:	4988      	ldr	r1, [pc, #544]	; (8003684 <HAL_I2C_IsDeviceReady+0x254>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fa90 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	e104      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2C_IsDeviceReady+0x50>
 800347c:	2302      	movs	r3, #2
 800347e:	e0fd      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d007      	beq.n	80034a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2224      	movs	r2, #36	; 0x24
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a70      	ldr	r2, [pc, #448]	; (8003688 <HAL_I2C_IsDeviceReady+0x258>)
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fa4e 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003500:	d103      	bne.n	800350a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0b6      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800350e:	897b      	ldrh	r3, [r7, #10]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800351c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800351e:	f7ff f82b 	bl	8002578 <HAL_GetTick>
 8003522:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b02      	cmp	r3, #2
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003552:	e025      	b.n	80035a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003554:	f7ff f810 	bl	8002578 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <HAL_I2C_IsDeviceReady+0x13a>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	22a0      	movs	r2, #160	; 0xa0
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2ba0      	cmp	r3, #160	; 0xa0
 80035aa:	d005      	beq.n	80035b8 <HAL_I2C_IsDeviceReady+0x188>
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_I2C_IsDeviceReady+0x188>
 80035b2:	7dbb      	ldrb	r3, [r7, #22]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0cd      	beq.n	8003554 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d129      	bne.n	8003622 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2319      	movs	r3, #25
 80035fa:	2201      	movs	r2, #1
 80035fc:	4921      	ldr	r1, [pc, #132]	; (8003684 <HAL_I2C_IsDeviceReady+0x254>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f9c2 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e036      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e02c      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800363a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2319      	movs	r3, #25
 8003642:	2201      	movs	r2, #1
 8003644:	490f      	ldr	r1, [pc, #60]	; (8003684 <HAL_I2C_IsDeviceReady+0x254>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f99e 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e012      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3301      	adds	r3, #1
 800365a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	f4ff af32 	bcc.w	80034ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00100002 	.word	0x00100002
 8003688:	ffff0000 	.word	0xffff0000

0800368c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4603      	mov	r3, r0
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	460b      	mov	r3, r1
 80036a0:	813b      	strh	r3, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2200      	movs	r2, #0
 80036be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f960 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036dc:	d103      	bne.n	80036e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e05f      	b.n	80037aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ea:	897b      	ldrh	r3, [r7, #10]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	492d      	ldr	r1, [pc, #180]	; (80037b4 <I2C_RequestMemoryWrite+0x128>)
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f998 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e04c      	b.n	80037aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	6a39      	ldr	r1, [r7, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa02 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b04      	cmp	r3, #4
 800373c:	d107      	bne.n	800374e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e02b      	b.n	80037aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003758:	893b      	ldrh	r3, [r7, #8]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]
 8003762:	e021      	b.n	80037a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	b29b      	uxth	r3, r3
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	6a39      	ldr	r1, [r7, #32]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f9dc 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2b04      	cmp	r3, #4
 8003788:	d107      	bne.n	800379a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e005      	b.n	80037aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800379e:	893b      	ldrh	r3, [r7, #8]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	00010002 	.word	0x00010002

080037b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	4608      	mov	r0, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	461a      	mov	r2, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	817b      	strh	r3, [r7, #10]
 80037ca:	460b      	mov	r3, r1
 80037cc:	813b      	strh	r3, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f8c2 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003818:	d103      	bne.n	8003822 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0aa      	b.n	800397c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	6a3a      	ldr	r2, [r7, #32]
 800383a:	4952      	ldr	r1, [pc, #328]	; (8003984 <I2C_RequestMemoryRead+0x1cc>)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f8fa 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e097      	b.n	800397c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003864:	6a39      	ldr	r1, [r7, #32]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f964 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2b04      	cmp	r3, #4
 8003878:	d107      	bne.n	800388a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e076      	b.n	800397c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003894:	893b      	ldrh	r3, [r7, #8]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	e021      	b.n	80038e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038a0:	893b      	ldrh	r3, [r7, #8]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	6a39      	ldr	r1, [r7, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f93e 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d107      	bne.n	80038d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e050      	b.n	800397c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038da:	893b      	ldrh	r3, [r7, #8]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	6a39      	ldr	r1, [r7, #32]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f923 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d107      	bne.n	800390c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e035      	b.n	800397c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2200      	movs	r2, #0
 8003928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f82b 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d103      	bne.n	8003950 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e013      	b.n	800397c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	4906      	ldr	r1, [pc, #24]	; (8003984 <I2C_RequestMemoryRead+0x1cc>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f863 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	00010002 	.word	0x00010002

08003988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003998:	e025      	b.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d021      	beq.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe fde9 	bl	8002578 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e023      	b.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	e00c      	b.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d0b6      	beq.n	800399a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a44:	e051      	b.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d123      	bne.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e046      	b.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d021      	beq.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fd67 	bl	8002578 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d116      	bne.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e020      	b.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10c      	bne.n	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4013      	ands	r3, r2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e00b      	b.n	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d18d      	bne.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b40:	e02d      	b.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f8ce 	bl	8003ce4 <I2C_IsAcknowledgeFailed>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e02d      	b.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d021      	beq.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7fe fd0d 	bl	8002578 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d116      	bne.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e007      	b.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d1ca      	bne.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc2:	e02d      	b.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f88d 	bl	8003ce4 <I2C_IsAcknowledgeFailed>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e02d      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d021      	beq.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fe fccc 	bl	8002578 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d116      	bne.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e007      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d1ca      	bne.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c44:	e042      	b.n	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d119      	bne.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0210 	mvn.w	r2, #16
 8003c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e029      	b.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c88:	f7fe fc76 	bl	8002578 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d116      	bne.n	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e007      	b.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d1b5      	bne.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d11b      	bne.n	8003d34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e264      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d075      	beq.n	8003e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d62:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4ba0      	ldr	r3, [pc, #640]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d112      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4b99      	ldr	r3, [pc, #612]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05b      	beq.n	8003e4c <HAL_RCC_OscConfig+0x108>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d157      	bne.n	8003e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e23f      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d106      	bne.n	8003db8 <HAL_RCC_OscConfig+0x74>
 8003daa:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a90      	ldr	r2, [pc, #576]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e01d      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a8a      	ldr	r2, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a87      	ldr	r2, [pc, #540]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	4b84      	ldr	r3, [pc, #528]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a83      	ldr	r2, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a80      	ldr	r2, [pc, #512]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fbbc 	bl	8002578 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fe fbb8 	bl	8002578 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e204      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0xc0>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fba8 	bl	8002578 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fba4 	bl	8002578 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1f0      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0xe8>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d063      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5a:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11c      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1c4      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4952      	ldr	r1, [pc, #328]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e03a      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <HAL_RCC_OscConfig+0x2b0>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fe fb5d 	bl	8002578 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fe fb59 	bl	8002578 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1a5      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	4b46      	ldr	r3, [pc, #280]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4940      	ldr	r1, [pc, #256]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_OscConfig+0x2b0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe fb3c 	bl	8002578 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fe fb38 	bl	8002578 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e184      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d030      	beq.n	8003f90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <HAL_RCC_OscConfig+0x2b4>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fb1c 	bl	8002578 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fe fb18 	bl	8002578 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e164      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x200>
 8003f62:	e015      	b.n	8003f90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x2b4>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fb05 	bl	8002578 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fe fb01 	bl	8002578 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e14d      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f0      	bne.n	8003f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a0 	beq.w	80040de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_OscConfig+0x2b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d121      	bne.n	800401e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <HAL_RCC_OscConfig+0x2b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <HAL_RCC_OscConfig+0x2b8>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe fac7 	bl	8002578 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e011      	b.n	8004012 <HAL_RCC_OscConfig+0x2ce>
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	42470000 	.word	0x42470000
 8003ff8:	42470e80 	.word	0x42470e80
 8003ffc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fe faba 	bl	8002578 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e106      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b85      	ldr	r3, [pc, #532]	; (8004228 <HAL_RCC_OscConfig+0x4e4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x2f0>
 8004026:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a80      	ldr	r2, [pc, #512]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	e01c      	b.n	800406e <HAL_RCC_OscConfig+0x32a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x312>
 800403c:	4b7b      	ldr	r3, [pc, #492]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a7a      	ldr	r2, [pc, #488]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	4b78      	ldr	r3, [pc, #480]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a77      	ldr	r2, [pc, #476]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
 8004054:	e00b      	b.n	800406e <HAL_RCC_OscConfig+0x32a>
 8004056:	4b75      	ldr	r3, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a74      	ldr	r2, [pc, #464]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
 8004062:	4b72      	ldr	r3, [pc, #456]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fe fa7f 	bl	8002578 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe fa7b 	bl	8002578 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0c5      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ee      	beq.n	800407e <HAL_RCC_OscConfig+0x33a>
 80040a0:	e014      	b.n	80040cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fe fa69 	bl	8002578 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fe fa65 	bl	8002578 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0af      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	4b5a      	ldr	r3, [pc, #360]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ee      	bne.n	80040aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4a55      	ldr	r2, [pc, #340]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 809b 	beq.w	800421e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e8:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d05c      	beq.n	80041ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d141      	bne.n	8004180 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe fa39 	bl	8002578 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410a:	f7fe fa35 	bl	8002578 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e081      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411c:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	019b      	lsls	r3, r3, #6
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	3b01      	subs	r3, #1
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	4937      	ldr	r1, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe fa0e 	bl	8002578 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004160:	f7fe fa0a 	bl	8002578 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e056      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x41c>
 800417e:	e04e      	b.n	800421e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_OscConfig+0x4ec>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe f9f7 	bl	8002578 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7fe f9f3 	bl	8002578 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e03f      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x44a>
 80041ac:	e037      	b.n	800421e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e032      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <HAL_RCC_OscConfig+0x4e8>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d028      	beq.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d121      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d11a      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d111      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d107      	bne.n	800421a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40007000 	.word	0x40007000
 800422c:	40023800 	.word	0x40023800
 8004230:	42470060 	.word	0x42470060

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0cc      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b68      	ldr	r3, [pc, #416]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90c      	bls.n	8004270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0b8      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004288:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a58      	ldr	r2, [pc, #352]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a0:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	494d      	ldr	r1, [pc, #308]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d044      	beq.n	8004354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d119      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e06f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e067      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4934      	ldr	r1, [pc, #208]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fe f928 	bl	8002578 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fe f924 	bl	8002578 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d20c      	bcs.n	800437c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e032      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4916      	ldr	r1, [pc, #88]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	490e      	ldr	r1, [pc, #56]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ba:	f000 f821 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490a      	ldr	r1, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe f888 	bl	80024f0 <HAL_InitTick>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08008c98 	.word	0x08008c98
 80043f8:	2000001c 	.word	0x2000001c
 80043fc:	20000020 	.word	0x20000020

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	2300      	movs	r3, #0
 8004412:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004418:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d00d      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x40>
 8004424:	2b08      	cmp	r3, #8
 8004426:	f200 80bd 	bhi.w	80045a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x34>
 800442e:	2b04      	cmp	r3, #4
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x3a>
 8004432:	e0b7      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004436:	60bb      	str	r3, [r7, #8]
       break;
 8004438:	e0b7      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443a:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800443c:	60bb      	str	r3, [r7, #8]
      break;
 800443e:	e0b4      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004440:	4b5d      	ldr	r3, [pc, #372]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004448:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d04d      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	461a      	mov	r2, r3
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	ea02 0800 	and.w	r8, r2, r0
 800446e:	ea03 0901 	and.w	r9, r3, r1
 8004472:	4640      	mov	r0, r8
 8004474:	4649      	mov	r1, r9
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	014b      	lsls	r3, r1, #5
 8004480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004484:	0142      	lsls	r2, r0, #5
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	ebb0 0008 	subs.w	r0, r0, r8
 800448e:	eb61 0109 	sbc.w	r1, r1, r9
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	018b      	lsls	r3, r1, #6
 800449c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044a0:	0182      	lsls	r2, r0, #6
 80044a2:	1a12      	subs	r2, r2, r0
 80044a4:	eb63 0301 	sbc.w	r3, r3, r1
 80044a8:	f04f 0000 	mov.w	r0, #0
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	00d9      	lsls	r1, r3, #3
 80044b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b6:	00d0      	lsls	r0, r2, #3
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	eb12 0208 	adds.w	r2, r2, r8
 80044c0:	eb43 0309 	adc.w	r3, r3, r9
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f04f 0100 	mov.w	r1, #0
 80044cc:	0259      	lsls	r1, r3, #9
 80044ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044d2:	0250      	lsls	r0, r2, #9
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	461a      	mov	r2, r3
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	f7fb fe78 	bl	80001d8 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4613      	mov	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e04a      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	461a      	mov	r2, r3
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	ea02 0400 	and.w	r4, r2, r0
 800450a:	ea03 0501 	and.w	r5, r3, r1
 800450e:	4620      	mov	r0, r4
 8004510:	4629      	mov	r1, r5
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	014b      	lsls	r3, r1, #5
 800451c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004520:	0142      	lsls	r2, r0, #5
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	1b00      	subs	r0, r0, r4
 8004528:	eb61 0105 	sbc.w	r1, r1, r5
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	018b      	lsls	r3, r1, #6
 8004536:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800453a:	0182      	lsls	r2, r0, #6
 800453c:	1a12      	subs	r2, r2, r0
 800453e:	eb63 0301 	sbc.w	r3, r3, r1
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	00d9      	lsls	r1, r3, #3
 800454c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004550:	00d0      	lsls	r0, r2, #3
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	1912      	adds	r2, r2, r4
 8004558:	eb45 0303 	adc.w	r3, r5, r3
 800455c:	f04f 0000 	mov.w	r0, #0
 8004560:	f04f 0100 	mov.w	r1, #0
 8004564:	0299      	lsls	r1, r3, #10
 8004566:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800456a:	0290      	lsls	r0, r2, #10
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	461a      	mov	r2, r3
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	f7fb fe2c 	bl	80001d8 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	3301      	adds	r3, #1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	60bb      	str	r3, [r7, #8]
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045a6:	60bb      	str	r3, [r7, #8]
      break;
 80045a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045aa:	68bb      	ldr	r3, [r7, #8]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	007a1200 	.word	0x007a1200

080045c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000001c 	.word	0x2000001c

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	08008ca8 	.word	0x08008ca8

08004604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07b      	b.n	800470e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004626:	d009      	beq.n	800463c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
 800462e:	e005      	b.n	800463c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd fd98 	bl	800218c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	ea42 0103 	orr.w	r1, r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 0104 	and.w	r1, r3, #4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	f003 0210 	and.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b088      	sub	sp, #32
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_SPI_Transmit+0x22>
 8004734:	2302      	movs	r3, #2
 8004736:	e126      	b.n	8004986 <HAL_SPI_Transmit+0x270>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004740:	f7fd ff1a 	bl	8002578 <HAL_GetTick>
 8004744:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d002      	beq.n	800475c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	77fb      	strb	r3, [r7, #31]
    goto error;
 800475a:	e10b      	b.n	8004974 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Transmit+0x52>
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800476c:	e102      	b.n	8004974 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2203      	movs	r2, #3
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	d10f      	bne.n	80047d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d007      	beq.n	80047f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fc:	d14b      	bne.n	8004896 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_SPI_Transmit+0xf6>
 8004806:	8afb      	ldrh	r3, [r7, #22]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d13e      	bne.n	800488a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004830:	e02b      	b.n	800488a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b02      	cmp	r3, #2
 800483e:	d112      	bne.n	8004866 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	881a      	ldrh	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	1c9a      	adds	r2, r3, #2
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	86da      	strh	r2, [r3, #54]	; 0x36
 8004864:	e011      	b.n	800488a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004866:	f7fd fe87 	bl	8002578 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d803      	bhi.n	800487e <HAL_SPI_Transmit+0x168>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d102      	bne.n	8004884 <HAL_SPI_Transmit+0x16e>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004888:	e074      	b.n	8004974 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ce      	bne.n	8004832 <HAL_SPI_Transmit+0x11c>
 8004894:	e04c      	b.n	8004930 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Transmit+0x18e>
 800489e:	8afb      	ldrh	r3, [r7, #22]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d140      	bne.n	8004926 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048ca:	e02c      	b.n	8004926 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d113      	bne.n	8004902 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004900:	e011      	b.n	8004926 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004902:	f7fd fe39 	bl	8002578 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d803      	bhi.n	800491a <HAL_SPI_Transmit+0x204>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d102      	bne.n	8004920 <HAL_SPI_Transmit+0x20a>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004924:	e026      	b.n	8004974 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1cd      	bne.n	80048cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fbcb 	bl	80050d0 <SPI_EndRxTxTransaction>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e000      	b.n	8004974 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004972:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004984:	7ffb      	ldrb	r3, [r7, #31]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b088      	sub	sp, #32
 8004992:	af02      	add	r7, sp, #8
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049aa:	d112      	bne.n	80049d2 <HAL_SPI_Receive+0x44>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10e      	bne.n	80049d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2204      	movs	r2, #4
 80049b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f8f1 	bl	8004bb0 <HAL_SPI_TransmitReceive>
 80049ce:	4603      	mov	r3, r0
 80049d0:	e0ea      	b.n	8004ba8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_SPI_Receive+0x52>
 80049dc:	2302      	movs	r3, #2
 80049de:	e0e3      	b.n	8004ba8 <HAL_SPI_Receive+0x21a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e8:	f7fd fdc6 	bl	8002578 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
 80049fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049fe:	e0ca      	b.n	8004b96 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_SPI_Receive+0x7e>
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a10:	e0c1      	b.n	8004b96 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2204      	movs	r2, #4
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	88fa      	ldrh	r2, [r7, #6]
 8004a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	d10f      	bne.n	8004a7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d007      	beq.n	8004a98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d162      	bne.n	8004b66 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004aa0:	e02e      	b.n	8004b00 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d115      	bne.n	8004adc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f103 020c 	add.w	r2, r3, #12
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	7812      	ldrb	r2, [r2, #0]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ada:	e011      	b.n	8004b00 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004adc:	f7fd fd4c 	bl	8002578 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d803      	bhi.n	8004af4 <HAL_SPI_Receive+0x166>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_Receive+0x16c>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004afe:	e04a      	b.n	8004b96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1cb      	bne.n	8004aa2 <HAL_SPI_Receive+0x114>
 8004b0a:	e031      	b.n	8004b70 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d113      	bne.n	8004b42 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	b292      	uxth	r2, r2
 8004b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b40:	e011      	b.n	8004b66 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b42:	f7fd fd19 	bl	8002578 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d803      	bhi.n	8004b5a <HAL_SPI_Receive+0x1cc>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d102      	bne.n	8004b60 <HAL_SPI_Receive+0x1d2>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b64:	e017      	b.n	8004b96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1cd      	bne.n	8004b0c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fa45 	bl	8005004 <SPI_EndRxTransaction>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75fb      	strb	r3, [r7, #23]
 8004b92:	e000      	b.n	8004b96 <HAL_SPI_Receive+0x208>
  }

error :
 8004b94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x26>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e18a      	b.n	8004eec <HAL_SPI_TransmitReceive+0x33c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bde:	f7fd fccb 	bl	8002578 <HAL_GetTick>
 8004be2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d00f      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x70>
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c06:	d107      	bne.n	8004c18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <HAL_SPI_TransmitReceive+0x68>
 8004c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d003      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c1e:	e15b      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x82>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x82>
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c38:	e14e      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d003      	beq.n	8004c4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2205      	movs	r2, #5
 8004c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	887a      	ldrh	r2, [r7, #2]
 8004c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	887a      	ldrh	r2, [r7, #2]
 8004c70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	887a      	ldrh	r2, [r7, #2]
 8004c76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d007      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004caa:	d178      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_TransmitReceive+0x10a>
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d166      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	1c9a      	adds	r2, r3, #2
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cde:	e053      	b.n	8004d88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d11b      	bne.n	8004d26 <HAL_SPI_TransmitReceive+0x176>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d016      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x176>
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d113      	bne.n	8004d26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	881a      	ldrh	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d119      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x1b8>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d014      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d64:	2301      	movs	r3, #1
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d68:	f7fd fc06 	bl	8002578 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d807      	bhi.n	8004d88 <HAL_SPI_TransmitReceive+0x1d8>
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d003      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d86:	e0a7      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1a6      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x130>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1a1      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x130>
 8004d9c:	e07c      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x1fc>
 8004da6:	8b7b      	ldrh	r3, [r7, #26]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d16b      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	7812      	ldrb	r2, [r2, #0]
 8004db8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd2:	e057      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d11c      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x26c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d017      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x26c>
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d114      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d119      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x2ae>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d014      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e5e:	f7fd fb8b 	bl	8002578 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d803      	bhi.n	8004e76 <HAL_SPI_TransmitReceive+0x2c6>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d102      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x2cc>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d103      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e82:	e029      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1a2      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x224>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d19d      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f917 	bl	80050d0 <SPI_EndRxTxTransaction>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d006      	beq.n	8004eb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004eb4:	e010      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	e000      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ed6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3730      	adds	r7, #48	; 0x30
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f04:	f7fd fb38 	bl	8002578 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	4413      	add	r3, r2
 8004f12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f14:	f7fd fb30 	bl	8002578 <HAL_GetTick>
 8004f18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	015b      	lsls	r3, r3, #5
 8004f20:	0d1b      	lsrs	r3, r3, #20
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2a:	e054      	b.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	d050      	beq.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f34:	f7fd fb20 	bl	8002578 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d902      	bls.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d13d      	bne.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f62:	d111      	bne.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	d004      	beq.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f76:	d107      	bne.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f90:	d10f      	bne.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e017      	b.n	8004ff6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d19b      	bne.n	8004f2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	2000001c 	.word	0x2000001c

08005004 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005018:	d111      	bne.n	800503e <SPI_EndRxTransaction+0x3a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005022:	d004      	beq.n	800502e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d107      	bne.n	800503e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005046:	d12a      	bne.n	800509e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005050:	d012      	beq.n	8005078 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	2180      	movs	r1, #128	; 0x80
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff ff49 	bl	8004ef4 <SPI_WaitFlagStateUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d02d      	beq.n	80050c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e026      	b.n	80050c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2200      	movs	r2, #0
 8005080:	2101      	movs	r1, #1
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff ff36 	bl	8004ef4 <SPI_WaitFlagStateUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01a      	beq.n	80050c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	f043 0220 	orr.w	r2, r3, #32
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e013      	b.n	80050c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2101      	movs	r1, #1
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff ff23 	bl	8004ef4 <SPI_WaitFlagStateUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e000      	b.n	80050c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <SPI_EndRxTxTransaction+0x7c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <SPI_EndRxTxTransaction+0x80>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0d5b      	lsrs	r3, r3, #21
 80050e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fa:	d112      	bne.n	8005122 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2200      	movs	r2, #0
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff fef4 	bl	8004ef4 <SPI_WaitFlagStateUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f043 0220 	orr.w	r2, r3, #32
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e00f      	b.n	8005142 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	3b01      	subs	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005138:	2b80      	cmp	r3, #128	; 0x80
 800513a:	d0f2      	beq.n	8005122 <SPI_EndRxTxTransaction+0x52>
 800513c:	e000      	b.n	8005140 <SPI_EndRxTxTransaction+0x70>
        break;
 800513e:	bf00      	nop
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	2000001c 	.word	0x2000001c
 8005150:	165e9f81 	.word	0x165e9f81

08005154 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e034      	b.n	80051d4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7fb fbae 	bl	80008e0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3308      	adds	r3, #8
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 fca6 	bl	8005ae0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	461a      	mov	r2, r3
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	f000 fcf0 	bl	8005b84 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6858      	ldr	r0, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	f000 fd25 	bl	8005c00 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	6892      	ldr	r2, [r2, #8]
 80051be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	6892      	ldr	r2, [r2, #8]
 80051ca:	f041 0101 	orr.w	r1, r1, #1
 80051ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e041      	b.n	8005272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd f8c4 	bl	8002390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 fa96 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d001      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04e      	b.n	8005332 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a23      	ldr	r2, [pc, #140]	; (8005340 <HAL_TIM_Base_Start_IT+0xc4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052be:	d01d      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <HAL_TIM_Base_Start_IT+0xc8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <HAL_TIM_Base_Start_IT+0xcc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_TIM_Base_Start_IT+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <HAL_TIM_Base_Start_IT+0xd4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a19      	ldr	r2, [pc, #100]	; (8005354 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <HAL_TIM_Base_Start_IT+0xdc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d111      	bne.n	8005320 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b06      	cmp	r3, #6
 800530c:	d010      	beq.n	8005330 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531e:	e007      	b.n	8005330 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40001800 	.word	0x40001800

0800535c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b02      	cmp	r3, #2
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0202 	mvn.w	r2, #2
 8005388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f9b5 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9a7 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f9b8 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0204 	mvn.w	r2, #4
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f98b 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f97d 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f98e 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b08      	cmp	r3, #8
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b08      	cmp	r3, #8
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0208 	mvn.w	r2, #8
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2204      	movs	r2, #4
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f961 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f953 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f964 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b10      	cmp	r3, #16
 800546c:	d122      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d11b      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0210 	mvn.w	r2, #16
 8005484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2208      	movs	r2, #8
 800548a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f937 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 80054a0:	e005      	b.n	80054ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f929 	bl	80056fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f93a 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10e      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d107      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0201 	mvn.w	r2, #1
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fc fda4 	bl	8002028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d10e      	bne.n	800550c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f8:	2b80      	cmp	r3, #128	; 0x80
 80054fa:	d107      	bne.n	800550c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fae0 	bl	8005acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d10e      	bne.n	8005538 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d107      	bne.n	8005538 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8ff 	bl	8005736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d10e      	bne.n	8005564 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b20      	cmp	r3, #32
 8005552:	d107      	bne.n	8005564 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0220 	mvn.w	r2, #32
 800555c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 faaa 	bl	8005ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_TIM_ConfigClockSource+0x1c>
 8005584:	2302      	movs	r3, #2
 8005586:	e0b4      	b.n	80056f2 <HAL_TIM_ConfigClockSource+0x186>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c0:	d03e      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0xd4>
 80055c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c6:	f200 8087 	bhi.w	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	f000 8086 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x172>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	d87f      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b70      	cmp	r3, #112	; 0x70
 80055da:	d01a      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0xa6>
 80055dc:	2b70      	cmp	r3, #112	; 0x70
 80055de:	d87b      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b60      	cmp	r3, #96	; 0x60
 80055e2:	d050      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x11a>
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d877      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b50      	cmp	r3, #80	; 0x50
 80055ea:	d03c      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0xfa>
 80055ec:	2b50      	cmp	r3, #80	; 0x50
 80055ee:	d873      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d058      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x13a>
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d86f      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b30      	cmp	r3, #48	; 0x30
 80055fa:	d064      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d86b      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b20      	cmp	r3, #32
 8005602:	d060      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d867      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d05c      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 800560c:	2b10      	cmp	r3, #16
 800560e:	d05a      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	e062      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f000 f9ad 	bl	8005980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	609a      	str	r2, [r3, #8]
      break;
 800563e:	e04f      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6899      	ldr	r1, [r3, #8]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f000 f996 	bl	8005980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005662:	609a      	str	r2, [r3, #8]
      break;
 8005664:	e03c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	461a      	mov	r2, r3
 8005674:	f000 f90a 	bl	800588c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2150      	movs	r1, #80	; 0x50
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f963 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 8005684:	e02c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	461a      	mov	r2, r3
 8005694:	f000 f929 	bl	80058ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2160      	movs	r1, #96	; 0x60
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f953 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 80056a4:	e01c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 f8ea 	bl	800588c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2140      	movs	r1, #64	; 0x40
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f943 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 80056c4:	e00c      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4619      	mov	r1, r3
 80056d0:	4610      	mov	r0, r2
 80056d2:	f000 f93a 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 80056d6:	e003      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
      break;
 80056dc:	e000      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a40      	ldr	r2, [pc, #256]	; (8005860 <TIM_Base_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d00f      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3d      	ldr	r2, [pc, #244]	; (8005864 <TIM_Base_SetConfig+0x118>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3c      	ldr	r2, [pc, #240]	; (8005868 <TIM_Base_SetConfig+0x11c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3b      	ldr	r2, [pc, #236]	; (800586c <TIM_Base_SetConfig+0x120>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3a      	ldr	r2, [pc, #232]	; (8005870 <TIM_Base_SetConfig+0x124>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2f      	ldr	r2, [pc, #188]	; (8005860 <TIM_Base_SetConfig+0x114>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d02b      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d027      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <TIM_Base_SetConfig+0x118>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d023      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2b      	ldr	r2, [pc, #172]	; (8005868 <TIM_Base_SetConfig+0x11c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01f      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	; (800586c <TIM_Base_SetConfig+0x120>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01b      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a29      	ldr	r2, [pc, #164]	; (8005870 <TIM_Base_SetConfig+0x124>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d017      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a28      	ldr	r2, [pc, #160]	; (8005874 <TIM_Base_SetConfig+0x128>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a27      	ldr	r2, [pc, #156]	; (8005878 <TIM_Base_SetConfig+0x12c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a26      	ldr	r2, [pc, #152]	; (800587c <TIM_Base_SetConfig+0x130>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a25      	ldr	r2, [pc, #148]	; (8005880 <TIM_Base_SetConfig+0x134>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a24      	ldr	r2, [pc, #144]	; (8005884 <TIM_Base_SetConfig+0x138>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a23      	ldr	r2, [pc, #140]	; (8005888 <TIM_Base_SetConfig+0x13c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d108      	bne.n	8005810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <TIM_Base_SetConfig+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_Base_SetConfig+0xf8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <TIM_Base_SetConfig+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d103      	bne.n	800584c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	615a      	str	r2, [r3, #20]
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40010400 	.word	0x40010400
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400
 800587c:	40014800 	.word	0x40014800
 8005880:	40001800 	.word	0x40001800
 8005884:	40001c00 	.word	0x40001c00
 8005888:	40002000 	.word	0x40002000

0800588c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f023 030a 	bic.w	r3, r3, #10
 80058c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b087      	sub	sp, #28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f023 0210 	bic.w	r2, r3, #16
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	031b      	lsls	r3, r3, #12
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	f043 0307 	orr.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	609a      	str	r2, [r3, #8]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800599a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e05a      	b.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d022      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d01d      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d018      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00e      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a18      	ldr	r2, [pc, #96]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d10c      	bne.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40001800 	.word	0x40001800

08005ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <FSMC_NORSRAM_Init+0xa0>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b0a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005b10:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005b16:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005b1c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005b22:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005b28:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005b2e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005b34:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005b3a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005b40:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005b46:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005b4c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d103      	bne.n	8005b64 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b62:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	fff00080 	.word	0xfff00080

08005b84 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005ba6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005bb2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005bba:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005bc2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005bcc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	3b02      	subs	r3, #2
 8005bd4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005bd6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6979      	ldr	r1, [r7, #20]
 8005bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c18:	d122      	bne.n	8005c60 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c22:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c36:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005c3e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005c46:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c4c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6979      	ldr	r1, [r7, #20]
 8005c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005c5e:	e005      	b.n	8005c6c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	cff00000 	.word	0xcff00000

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f000 f820 	bl	8005cd8 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08008cb8 	.word	0x08008cb8
 8005cbc:	08008cb8 	.word	0x08008cb8
 8005cc0:	08008cb8 	.word	0x08008cb8
 8005cc4:	08008cbc 	.word	0x08008cbc

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <_init>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr

08005ce4 <_fini>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr
